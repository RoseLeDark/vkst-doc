.TH "vkst::buffer< TVALUE, TALIGNMENT, TALLOCATOR >" 3 "vkbst" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vkst::buffer< TVALUE, TALIGNMENT, TALLOCATOR > \- A templated buffer class for managing dynamic arrays of values\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vkstBuffer\&.hpp>\fP
.SS "Öffentliche Typen"

.in +1c
.ti -1c
.RI "using \fBself_type\fP = \fBbuffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >"
.br
.RI "Type alias for the current buffer type\&. "
.ti -1c
.RI "using \fBvalue_type\fP = TVALUE __attribute__((__vector_size__(TALIGNMENT), __aligned__(TALIGNMENT)))"
.br
.RI "Type alias for the value type stored in the buffer\&. "
.ti -1c
.RI "using \fBallocator\fP = TALLOCATOR"
.br
.RI "Type alias for the allocator used\&. "
.ti -1c
.RI "using \fBpointer\fP = \fBvalue_type\fP *"
.br
.RI "Type alias for a pointer to a value of the buffer type\&. "
.ti -1c
.RI "using \fBreference\fP = \fBvalue_type\fP &"
.br
.RI "Type alias for a reference to a value of the buffer type\&. "
.ti -1c
.RI "using \fBsize_type\fP = size_t"
.br
.RI "Type alias for the size type of the buffer\&. "
.ti -1c
.RI "using \fBconst_reference\fP = const \fBvalue_type\fP &"
.br
.RI "Type alias for a const reference to a value of the buffer type\&. "
.ti -1c
.RI "using \fBconst_pointer\fP = const \fBvalue_type\fP *"
.br
.RI "Type alias for a const pointer to a value of the buffer type\&. "
.ti -1c
.RI "using \fBiterator_category\fP = std::random_access_iterator_tag"
.br
.RI "Type alias for the iterator category\&. "
.ti -1c
.RI "using \fBdifference_type\fP = ptrdiff_t"
.br
.RI "Type alias for the difference type\&. "
.ti -1c
.RI "using \fBiterator\fP = \fBpointer\fP"
.br
.RI "Type alias for the iterator type\&. "
.ti -1c
.RI "using \fBconst_iterator\fP = const \fBvalue_type\fP *"
.br
.RI "Type alias for a const iterator type\&. "
.in -1c
.SS "Öffentliche Methoden"

.in +1c
.ti -1c
.RI "\fBbuffer\fP (\fBsize_type\fP size) noexcept"
.br
.RI "Constructs and allocates a buffer with the given size\&. "
.ti -1c
.RI "\fBbuffer\fP (\fBpointer\fP \fBbuffer\fP, \fBsize_type\fP size) noexcept"
.br
.RI "Constructs a buffer from an existing memory pointer\&. "
.ti -1c
.RI "\fBbuffer\fP (\fBconst_pointer\fP \fBbuffer\fP, \fBsize_type\fP size) noexcept"
.br
.RI "Constructs and allocates a buffer, copying contents from another buffer\&. "
.ti -1c
.RI "\fBbuffer\fP (const \fBself_type\fP &other) noexcept=delete"
.br
.ti -1c
.RI "\fBself_type\fP & \fBoperator=\fP (const \fBself_type\fP &)=delete"
.br
.ti -1c
.RI "\fBself_type\fP & \fBoperator=\fP (const \fBself_type\fP &) volatile=delete"
.br
.ti -1c
.RI "\fB~buffer\fP () noexcept"
.br
.RI "Deconstrut the buffer\&. Is allocated the memory by buffer, then deallocated it\&. "
.ti -1c
.RI "\fBself_type\fP * \fBcopy\fP (size_t size)"
.br
.RI "Copies the current buffer to a new buffer of the given size\&. "
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP ()"
.br
.RI "Get the iterator to the beginning of the buffer\&. "
.ti -1c
.RI "\fBconst_iterator\fP \fBbegin\fP () const"
.br
.RI "Get the iterator to the beginning of the buffer\&. "
.ti -1c
.RI "\fBiterator\fP \fBend\fP ()"
.br
.RI "Get the iterator to end of the buffer\&. "
.ti -1c
.RI "\fBconst_iterator\fP \fBend\fP () const"
.br
.RI "Get the iterator to end of the buffer\&. "
.ti -1c
.RI "void \fBappend\fP (\fBconst_pointer\fP pBuffer, std::size_t sBufferSize)"
.br
.RI "Resizes this buffer and appends the given data\&. "
.ti -1c
.RI "void \fBappend\fP (\fBvalue_type\fP value)"
.br
.RI "Resizes this buffer and appends the given data\&. "
.ti -1c
.RI "void \fBappend\fP (const \fBself_type\fP &refBuffer)"
.br
.RI "Resizes this buffer and appends the given data\&. "
.ti -1c
.RI "bool \fBresize\fP (\fBsize_type\fP newSize, bool bReserve=true)"
.br
.RI "Resizes the buffer capacity and size\&. "
.ti -1c
.RI "bool \fBchange_size\fP (\fBsize_type\fP newSize, bool bReserve=true)"
.br
.RI "Change the buffer size\&. "
.ti -1c
.RI "void \fBassign\fP (\fBconst_pointer\fP pBuffer, \fBsize_type\fP size)"
.br
.RI "Assigns the argument buffer to this buffer\&. "
.ti -1c
.RI "void \fBclear\fP ()"
.br
.RI "Clear the used content\&. "
.ti -1c
.RI "bool \fBis_equel\fP (const \fBbuffer\fP &other) const"
.br
.RI "Is the given buffer equel with this? "
.ti -1c
.RI "constexpr bool \fBis_empty\fP () const noexcept"
.br
.RI "is the buffer empty? "
.ti -1c
.RI "\fBpointer\fP * \fBget_raw\fP () const noexcept"
.br
.ti -1c
.RI "constexpr bool \fBis_full\fP () const noexcept"
.br
.RI "is the buffer full? "
.ti -1c
.RI "constexpr \fBsize_type\fP \fBget_size\fP () const noexcept"
.br
.RI "Get the allocated memory size in elements\&. "
.ti -1c
.RI "constexpr \fBsize_type\fP \fBget_size_bytes\fP () const noexcept"
.br
.RI "Get the allocated memory size in bytes\&. "
.ti -1c
.RI "constexpr \fBsize_type\fP \fBget_used\fP () const noexcept"
.br
.RI "Get the used size of the buffer in elements\&. "
.ti -1c
.RI "constexpr \fBsize_type\fP \fBget_used_bytes\fP () const noexcept"
.br
.RI "Get the used size of the buffer in bytes\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBbuffer\fP &other) const"
.br
.RI "Compare operator\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBbuffer\fP &other) const"
.br
.RI "Not compare operator\&. "
.ti -1c
.RI "\fBreference\fP \fBoperator[]\fP (\fBsize_type\fP index)"
.br
.RI "Access operator to get an element at a specific index\&. "
.ti -1c
.RI "\fBconst_reference\fP \fBoperator[]\fP (\fBsize_type\fP index) const"
.br
.RI "Access operator to get a constant element at a specific index\&. "
.ti -1c
.RI "\fBpointer\fP \fBoperator=\fP (\fBpointer\fP other) noexcept"
.br
.ti -1c
.RI "\fBpointer\fP \fBoperator=\fP (\fBpointer\fP other) volatile noexcept"
.br
.ti -1c
.RI "void \fBis_locked\fP (const bool value)"
.br
.RI "Sets or gets the 'locked' state of the buffer (whether it's on the device or in RAM)\&. "
.ti -1c
.RI "bool \fBis_locked\fP () const"
.br
.RI "Gets the 'locked' state of the buffer\&. "
.in -1c
.SS "Geschützte Attribute"

.in +1c
.ti -1c
.RI "\fBpointer\fP \fBm_pRawBuffer\fP"
.br
.RI "Raw pointer to the buffer's data\&. "
.ti -1c
.RI "\fBsize_type\fP \fBm_sSize\fP"
.br
.RI "The total allocated size of the buffer in elements\&. "
.ti -1c
.RI "\fBsize_type\fP \fBm_sUsed\fP"
.br
.RI "The number of elements currently used in the buffer\&. "
.ti -1c
.RI "bool \fBm_bOwnMem\fP"
.br
.RI "Flag indicating whether the buffer owns the allocated memory\&. "
.ti -1c
.RI "\fBallocator\fP \fBm_allocator\fP"
.br
.RI "The allocator used for memory allocation and deallocation\&. "
.ti -1c
.RI "std::atomic< bool > \fBm_is2Device\fP"
.br
.RI "Atomic flag indicating whether the buffer is stored on a device\&. "
.in -1c
.SH "Ausführliche Beschreibung"
.PP 

.SS "template<typename TVALUE, char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR = default_allocator>
.br
class vkst::buffer< TVALUE, TALIGNMENT, TALLOCATOR >"A templated buffer class for managing dynamic arrays of values\&. 

This class provides functionality to allocate, resize, and manage buffers in memory\&. It supports appending elements, clearing the buffer, and copying data from another buffer\&.
.PP
\fBTemplate-Parameter\fP
.RS 4
\fITVALUE\fP The type of elements stored in the buffer\&. 
.br
\fITALIGNMENT\fP The alignment of the buffer (default is the alignment of \fCTVALUE\fP)\&. 
.br
\fITALLOCATOR\fP The allocator used for memory allocation (default is \fCdefault_allocator\fP)\&. 
.RE
.PP

.PP
Definiert in Zeile \fB23\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SH "Dokumentation der benutzerdefinierten Datentypen"
.PP 
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> using \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::allocator =  TALLOCATOR"

.PP
Type alias for the allocator used\&. 
.PP
\fBZu beachten\fP
.RS 4
The allocator defines the memory management strategy\&. 
.RE
.PP

.PP
Definiert in Zeile \fB39\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> using \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::const_iterator =  const \fBvalue_type\fP*"

.PP
Type alias for a const iterator type\&. 
.PP
\fBZu beachten\fP
.RS 4
Used to iterate through the buffer in a read-only manner\&. 
.RE
.PP

.PP
Definiert in Zeile \fB86\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> using \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::const_pointer =  const \fBvalue_type\fP*"

.PP
Type alias for a const pointer to a value of the buffer type\&. 
.PP
\fBZu beachten\fP
.RS 4
Used to access the elements in the buffer in a read-only manner\&. 
.RE
.PP

.PP
Definiert in Zeile \fB65\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> using \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::const_reference =  const \fBvalue_type\fP&"

.PP
Type alias for a const reference to a value of the buffer type\&. 
.PP
\fBZu beachten\fP
.RS 4
Used to access the elements in the buffer in a read-only manner\&. 
.RE
.PP

.PP
Definiert in Zeile \fB60\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> using \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::difference_type =  ptrdiff_t"

.PP
Type alias for the difference type\&. 
.PP
\fBZu beachten\fP
.RS 4
Represents the difference between two iterators in the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB76\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> using \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::iterator =  \fBpointer\fP"

.PP
Type alias for the iterator type\&. 
.PP
\fBZu beachten\fP
.RS 4
Used to iterate through the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB81\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> using \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::iterator_category =  std::random_access_iterator_tag"

.PP
Type alias for the iterator category\&. 
.PP
\fBZu beachten\fP
.RS 4
Specifies that the iterator supports random access\&. 
.RE
.PP

.PP
Definiert in Zeile \fB71\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> using \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::pointer =  \fBvalue_type\fP*"

.PP
Type alias for a pointer to a value of the buffer type\&. 
.PP
\fBZu beachten\fP
.RS 4
Used to access the stored elements in the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB44\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> using \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::reference =  \fBvalue_type\fP&"

.PP
Type alias for a reference to a value of the buffer type\&. 
.PP
\fBZu beachten\fP
.RS 4
Used to access the elements in the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB49\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> using \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::self_type =  \fBbuffer\fP<TVALUE,TALIGNMENT, TALLOCATOR>"

.PP
Type alias for the current buffer type\&. 
.PP
\fBZu beachten\fP
.RS 4
Used to define the buffer type in various methods\&. 
.RE
.PP

.PP
Definiert in Zeile \fB29\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> using \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::size_type =  size_t"

.PP
Type alias for the size type of the buffer\&. 
.PP
\fBZu beachten\fP
.RS 4
Used for specifying the size of the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB54\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> using \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::value_type =  TVALUE __attribute__((__vector_size__(TALIGNMENT), __aligned__(TALIGNMENT)))"

.PP
Type alias for the value type stored in the buffer\&. 
.PP
\fBZu beachten\fP
.RS 4
The value type is aligned according to the specified alignment\&. 
.RE
.PP

.PP
Definiert in Zeile \fB34\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SH "Beschreibung der Konstruktoren und Destruktoren"
.PP 
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::buffer (\fBsize_type\fP size)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Constructs and allocates a buffer with the given size\&. This constructor initializes a buffer with the specified size, allocating memory for it\&.
.PP
\fBParameter\fP
.RS 4
\fIsize\fP The size of the buffer (in elements)\&. 
.RE
.PP

.PP
Definiert in Zeile \fB95\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::buffer (\fBpointer\fP buffer, \fBsize_type\fP size)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Constructs a buffer from an existing memory pointer\&. This constructor initializes a buffer with an external memory pointer\&. The memory is not deallocated when the buffer is destroyed\&.
.PP
\fBParameter\fP
.RS 4
\fIbuffer\fP The existing pointer to the memory\&. 
.br
\fIsize\fP The size of the buffer (in elements)\&. 
.RE
.PP

.PP
Definiert in Zeile \fB110\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::buffer (\fBconst_pointer\fP buffer, \fBsize_type\fP size)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Constructs and allocates a buffer, copying contents from another buffer\&. This constructor creates a buffer and copies the data from an existing buffer into it\&.
.PP
\fBParameter\fP
.RS 4
\fIbuffer\fP The existing pointer to the data\&. 
.br
\fIsize\fP The size of the buffer (in elements)\&. 
.RE
.PP

.PP
Definiert in Zeile \fB122\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::buffer (const \fBself_type\fP & other)\fC [delete]\fP, \fC [noexcept]\fP"

.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::~\fBbuffer\fP ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Deconstrut the buffer\&. Is allocated the memory by buffer, then deallocated it\&. 
.PP
Definiert in Zeile \fB135\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SH "Dokumentation der Elementfunktionen"
.PP 
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> void \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::append (const \fBself_type\fP & refBuffer)\fC [inline]\fP"

.PP
Resizes this buffer and appends the given data\&. 
.PP
\fBParameter\fP
.RS 4
\fIrefBuffer\fP The other buffer to append\&. 
.RE
.PP

.PP
Definiert in Zeile \fB203\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> void \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::append (\fBconst_pointer\fP pBuffer, std::size_t sBufferSize)\fC [inline]\fP"

.PP
Resizes this buffer and appends the given data\&. 
.PP
\fBParameter\fP
.RS 4
\fIpBuffer\fP The array of data to append\&. 
.br
\fIsBufferSize\fP The number elements in the array\&. 
.RE
.PP

.PP
Definiert in Zeile \fB182\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> void \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::append (\fBvalue_type\fP value)\fC [inline]\fP"

.PP
Resizes this buffer and appends the given data\&. 
.PP
\fBParameter\fP
.RS 4
\fIvalue\fP The value to append\&. 
.RE
.PP

.PP
Definiert in Zeile \fB194\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> void \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::assign (\fBconst_pointer\fP pBuffer, \fBsize_type\fP size)\fC [inline]\fP"

.PP
Assigns the argument buffer to this buffer\&. 
.PP
\fBZu beachten\fP
.RS 4
If necessary, resizes the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB269\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBiterator\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::begin ()\fC [inline]\fP"

.PP
Get the iterator to the beginning of the buffer\&. 
.PP
\fBRückgabe\fP
.RS 4
The iterator to the beginning of the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB157\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBconst_iterator\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::begin () const\fC [inline]\fP"

.PP
Get the iterator to the beginning of the buffer\&. 
.PP
\fBRückgabe\fP
.RS 4
The iterator to the beginning of the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB163\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> bool \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::change_size (\fBsize_type\fP newSize, bool bReserve = \fCtrue\fP)\fC [inline]\fP"

.PP
Change the buffer size\&. 
.PP
\fBZu beachten\fP
.RS 4
Externally memory can not change\&.
.RE
.PP
\fBParameter\fP
.RS 4
\fInewSize\fP The new size for this buffer\&. 
.br
\fIbReserve\fP If true then the content of the old buffer is copied over to the new buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB245\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> void \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::clear ()\fC [inline]\fP"

.PP
Clear the used content\&. 
.PP
Definiert in Zeile \fB282\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBself_type\fP * \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::copy (size_t size)\fC [inline]\fP"

.PP
Copies the current buffer to a new buffer of the given size\&. This method returns a new buffer containing the current buffer's data\&.
.PP
\fBParameter\fP
.RS 4
\fIsize\fP The size of the new buffer\&. 
.RE
.PP
\fBRückgabe\fP
.RS 4
A pointer to the newly created buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB147\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBiterator\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::end ()\fC [inline]\fP"

.PP
Get the iterator to end of the buffer\&. 
.PP
\fBRückgabe\fP
.RS 4
The iterator to end of the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB169\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBconst_iterator\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::end () const\fC [inline]\fP"

.PP
Get the iterator to end of the buffer\&. 
.PP
\fBRückgabe\fP
.RS 4
The iterator to end of the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB175\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBpointer\fP * \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::get_raw () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Definiert in Zeile \fB307\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> constexpr \fBsize_type\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::get_size () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Get the allocated memory size in elements\&. 
.PP
\fBRückgabe\fP
.RS 4
The allocated memory size in elements\&. 
.RE
.PP

.PP
Definiert in Zeile \fB317\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> constexpr \fBsize_type\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::get_size_bytes () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Get the allocated memory size in bytes\&. 
.PP
\fBRückgabe\fP
.RS 4
The allocated memory size in bytes\&. 
.RE
.PP

.PP
Definiert in Zeile \fB323\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> constexpr \fBsize_type\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::get_used () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Get the used size of the buffer in elements\&. 
.PP
\fBRückgabe\fP
.RS 4
The used size of the buffer in elements\&. 
.RE
.PP

.PP
Definiert in Zeile \fB329\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> constexpr \fBsize_type\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::get_used_bytes () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Get the used size of the buffer in bytes\&. 
.PP
\fBRückgabe\fP
.RS 4
The used size of the buffer in bytes\&. 
.RE
.PP

.PP
Definiert in Zeile \fB335\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> constexpr bool \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::is_empty () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
is the buffer empty? 
.PP
\fBRückgabe\fP
.RS 4
If true then is the buffer empty and if false then not\&. 
.RE
.PP

.PP
Definiert in Zeile \fB305\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> bool \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::is_equel (const \fBbuffer\fP< TVALUE, TALIGNMENT, TALLOCATOR > & other) const\fC [inline]\fP"

.PP
Is the given buffer equel with this? 
.PP
\fBParameter\fP
.RS 4
\fIother\fP Reference to the comparing buffer 
.RE
.PP
\fBRückgabe\fP
.RS 4
true The given buffer is equel with this, false when not\&. 
.RE
.PP

.PP
Definiert in Zeile \fB293\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> constexpr bool \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::is_full () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
is the buffer full? 
.PP
\fBRückgabe\fP
.RS 4
If true then is the buffer full and if false then not\&. 
.RE
.PP

.PP
Definiert in Zeile \fB312\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> bool \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::is_locked () const\fC [inline]\fP"

.PP
Gets the 'locked' state of the buffer\&. 
.PP
\fBRückgabe\fP
.RS 4
true if the buffer is locked to device memory, false if it's in RAM\&. 
.RE
.PP

.PP
Definiert in Zeile \fB401\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> void \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::is_locked (const bool value)\fC [inline]\fP"

.PP
Sets or gets the 'locked' state of the buffer (whether it's on the device or in RAM)\&. 
.PP
\fBParameter\fP
.RS 4
\fIvalue\fP If true, locks the buffer to device memory; if false, locks it to RAM\&. 
.RE
.PP

.PP
Definiert in Zeile \fB384\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> bool \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::operator!= (const \fBbuffer\fP< TVALUE, TALIGNMENT, TALLOCATOR > & other) const\fC [inline]\fP"

.PP
Not compare operator\&. 
.PP
Definiert in Zeile \fB346\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBself_type\fP & \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::operator= (const \fBself_type\fP &) volatile\fC [delete]\fP"

.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBself_type\fP & \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::operator= (const \fBself_type\fP &)\fC [delete]\fP"

.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBpointer\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::operator= (\fBpointer\fP other)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Definiert in Zeile \fB372\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBpointer\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::operator= (\fBpointer\fP other) volatile\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Definiert in Zeile \fB376\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> bool \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::operator== (const \fBbuffer\fP< TVALUE, TALIGNMENT, TALLOCATOR > & other) const\fC [inline]\fP"

.PP
Compare operator\&. 
.PP
Definiert in Zeile \fB340\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBreference\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::operator[] (\fBsize_type\fP index)\fC [inline]\fP"

.PP
Access operator to get an element at a specific index\&. 
.PP
\fBParameter\fP
.RS 4
\fIindex\fP The index of the element to access\&. 
.RE
.PP
\fBRückgabe\fP
.RS 4
A reference to the element at the given index\&. 
.RE
.PP

.PP
Definiert in Zeile \fB355\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBconst_reference\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::operator[] (\fBsize_type\fP index) const\fC [inline]\fP"

.PP
Access operator to get a constant element at a specific index\&. 
.PP
\fBParameter\fP
.RS 4
\fIindex\fP The index of the element to access\&. 
.RE
.PP
\fBRückgabe\fP
.RS 4
A constant reference to the element at the given index\&. 
.RE
.PP

.PP
Definiert in Zeile \fB366\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> bool \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::resize (\fBsize_type\fP newSize, bool bReserve = \fCtrue\fP)\fC [inline]\fP"

.PP
Resizes the buffer capacity and size\&. 
.PP
\fBZu beachten\fP
.RS 4
Externally memory can not resize\&.
.RE
.PP
\fBParameter\fP
.RS 4
\fInewSize\fP The new size for this buffer\&. 
.br
\fIbReserve\fP If true then the content of the old buffer is copied over to the new buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB214\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SH "Dokumentation der Felder"
.PP 
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBallocator\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::m_allocator\fC [protected]\fP"

.PP
The allocator used for memory allocation and deallocation\&. 
.PP
\fBZu beachten\fP
.RS 4
The allocator defines how memory is managed for this buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB475\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> bool \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::m_bOwnMem\fC [protected]\fP"

.PP
Flag indicating whether the buffer owns the allocated memory\&. 
.PP
\fBZu beachten\fP
.RS 4
If true, the buffer is responsible for freeing the memory\&. If false, the memory is externally managed\&. 
.RE
.PP

.PP
Definiert in Zeile \fB469\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> std::atomic<bool> \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::m_is2Device\fC [protected]\fP"

.PP
Atomic flag indicating whether the buffer is stored on a device\&. 
.PP
\fBZu beachten\fP
.RS 4
This flag is used to track whether the buffer is in device memory (e\&.g\&., GPU memory) or system memory (e\&.g\&., RAM)\&. 
.RE
.PP

.PP
Definiert in Zeile \fB481\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBpointer\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::m_pRawBuffer\fC [protected]\fP"

.PP
Raw pointer to the buffer's data\&. 
.PP
\fBZu beachten\fP
.RS 4
This pointer holds the actual memory allocated for the buffer\&. 
.RE
.PP
\fBWarnung\fP
.RS 4
The pointer may point to device memory, so be careful when accessing it\&. 
.RE
.PP

.PP
Definiert in Zeile \fB451\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBsize_type\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::m_sSize\fC [protected]\fP"

.PP
The total allocated size of the buffer in elements\&. 
.PP
\fBZu beachten\fP
.RS 4
This is the capacity of the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB457\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<typename TVALUE , char TALIGNMENT = alignment_of<TVALUE>::res, class TALLOCATOR  = default_allocator> \fBsize_type\fP \fBvkst::buffer\fP< TVALUE, TALIGNMENT, TALLOCATOR >::m_sUsed\fC [protected]\fP"

.PP
The number of elements currently used in the buffer\&. 
.PP
\fBZu beachten\fP
.RS 4
This is the actual size of the buffer, which may be smaller than the allocated size\&. 
.RE
.PP

.PP
Definiert in Zeile \fB463\fP der Datei \fBvkstBuffer\&.hpp\fP\&.

.SH "Autor"
.PP 
Automatisch erzeugt von Doxygen für vkbst aus dem Quellcode\&.
