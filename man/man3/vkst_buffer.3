.TH "vkst::buffer< TVALUE, TALIGNMENT, TALLOCATOR >" 3 "vkbst" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vkst::buffer< TVALUE, TALIGNMENT, TALLOCATOR >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vkstBuffer\&.hpp>\fP
.SS "Öffentliche Typen"

.in +1c
.ti -1c
.RI "\fBusing\fP \fBself_type\fP = \fBbuffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >"
.br
.ti -1c
.RI "\fBusing\fP \fBvalue_type\fP = \fBTVALUE\fP __attribute__((\fB__vector_size__\fP(\fBTALIGNMENT\fP), \fB__aligned__\fP(\fBTALIGNMENT\fP)))"
.br
.ti -1c
.RI "\fBusing\fP \fBallocator\fP = \fBTALLOCATOR\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBpointer\fP = \fBvalue_type\fP *"
.br
.ti -1c
.RI "\fBusing\fP \fBreference\fP = \fBvalue_type\fP &"
.br
.ti -1c
.RI "\fBusing\fP \fBsize_type\fP = \fBsize_t\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBconst_reference\fP = \fBconst\fP \fBvalue_type\fP &"
.br
.ti -1c
.RI "\fBusing\fP \fBconst_pointer\fP = \fBconst\fP \fBvalue_type\fP *"
.br
.ti -1c
.RI "\fBusing\fP \fBiterator_category\fP = std::random_access_iterator_tag"
.br
.ti -1c
.RI "\fBusing\fP \fBdifference_type\fP = \fBptrdiff_t\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBiterator\fP = \fBpointer\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBconst_iterator\fP = \fBconst\fP \fBvalue_type\fP *"
.br
.in -1c
.SS "Öffentliche Methoden"

.in +1c
.ti -1c
.RI "\fBbuffer\fP (\fBsize_type\fP \fBsize\fP) \fBnoexcept\fP"
.br
.RI "Consructs and allocates the Buffer\&. "
.ti -1c
.RI "\fBbuffer\fP (\fBpointer\fP \fBbuffer\fP, \fBsize_type\fP \fBsize\fP) \fBnoexcept\fP"
.br
.RI "Consructs the buffer from a given memory pointer\&. "
.ti -1c
.RI "\fBbuffer\fP (\fBconst_pointer\fP \fBbuffer\fP, \fBsize_type\fP \fBsize\fP) \fBnoexcept\fP"
.br
.RI "Consructs and allocates the Buffer\&. copies the contents of the supplied memory into the buffer\&. "
.ti -1c
.RI "\fBbuffer\fP (\fBconst\fP \fBself_type\fP &\fBother\fP) \fBnoexcept\fP=\fBdelete\fP"
.br
.ti -1c
.RI "\fBself_type\fP & \fBoperator=\fP (\fBconst\fP \fBself_type\fP &)=\fBdelete\fP"
.br
.ti -1c
.RI "\fBself_type\fP & \fBoperator=\fP (\fBconst\fP \fBself_type\fP &) \fBvolatile\fP=\fBdelete\fP"
.br
.ti -1c
.RI "\fB~buffer\fP () \fBnoexcept\fP"
.br
.RI "Deconstrut the buffer\&. Is allocated the memory by buffer, then deallocated it\&. "
.ti -1c
.RI "\fBself_type\fP * \fBcopy\fP (\fBsize_t\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP ()"
.br
.RI "Get the iterator to the beginning of the buffer\&. "
.ti -1c
.RI "\fBconst_iterator\fP \fBbegin\fP () \fBconst\fP"
.br
.RI "Get the iterator to the beginning of the buffer\&. "
.ti -1c
.RI "\fBiterator\fP \fBend\fP ()"
.br
.RI "Get the iterator to end of the buffer\&. "
.ti -1c
.RI "\fBconst_iterator\fP \fBend\fP () \fBconst\fP"
.br
.RI "Get the iterator to end of the buffer\&. "
.ti -1c
.RI "\fBvoid\fP \fBappend\fP (\fBconst_pointer\fP \fBpBuffer\fP, std::size_t \fBsBufferSize\fP)"
.br
.RI "Resizes this buffer and appends the given data\&. "
.ti -1c
.RI "\fBvoid\fP \fBappend\fP (\fBvalue_type\fP \fBvalue\fP)"
.br
.RI "Resizes this buffer and appends the given data\&. "
.ti -1c
.RI "\fBvoid\fP \fBappend\fP (\fBconst\fP \fBself_type\fP &\fBrefBuffer\fP)"
.br
.RI "Resizes this buffer and appends the given data\&. "
.ti -1c
.RI "\fBbool\fP \fBresize\fP (\fBsize_type\fP \fBnewSize\fP, \fBbool\fP \fBbReserve\fP=\fBtrue\fP)"
.br
.RI "Resizes the buffer capacity and size\&. "
.ti -1c
.RI "\fBbool\fP \fBchange_size\fP (\fBsize_type\fP \fBnewSize\fP, \fBbool\fP \fBbReserve\fP=\fBtrue\fP)"
.br
.RI "Change the buffer size\&. "
.ti -1c
.RI "\fBvoid\fP \fBassign\fP (\fBconst_pointer\fP \fBpBuffer\fP, \fBsize_type\fP \fBsize\fP)"
.br
.RI "Assigns the argument buffer to this buffer\&. "
.ti -1c
.RI "\fBvoid\fP \fBclear\fP ()"
.br
.RI "Clear the used content\&. "
.ti -1c
.RI "\fBbool\fP \fBis_equel\fP (\fBconst\fP \fBbuffer\fP &\fBother\fP) \fBconst\fP"
.br
.RI "Is the given buffer equel with this? "
.ti -1c
.RI "\fBconstexpr\fP \fBbool\fP \fBis_empty\fP () \fBconst\fP \fBnoexcept\fP"
.br
.RI "is the buffer empty? "
.ti -1c
.RI "\fBpointer\fP * \fBget_raw\fP () \fBconst\fP \fBnoexcept\fP"
.br
.ti -1c
.RI "\fBconstexpr\fP \fBbool\fP \fBis_full\fP () \fBconst\fP \fBnoexcept\fP"
.br
.RI "is the buffer full? "
.ti -1c
.RI "\fBconstexpr\fP \fBsize_type\fP \fBget_size\fP () \fBconst\fP \fBnoexcept\fP"
.br
.RI "Get the allocated memory size in elements\&. "
.ti -1c
.RI "\fBconstexpr\fP \fBsize_type\fP \fBget_size_bytes\fP () \fBconst\fP \fBnoexcept\fP"
.br
.RI "Get the allocated memory size in bytes\&. "
.ti -1c
.RI "\fBconstexpr\fP \fBsize_type\fP \fBget_used\fP () \fBconst\fP \fBnoexcept\fP"
.br
.RI "Get the used size of the buffer in elements\&. "
.ti -1c
.RI "\fBconstexpr\fP \fBsize_type\fP \fBget_used_bytes\fP () \fBconst\fP \fBnoexcept\fP"
.br
.RI "Get the used size of the buffer in bytes\&. "
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBbuffer\fP &\fBother\fP) \fBconst\fP"
.br
.RI "Compare operator\&. "
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBbuffer\fP &\fBother\fP) \fBconst\fP"
.br
.RI "Not compare operator\&. "
.ti -1c
.RI "\fBreference\fP \fBoperator[]\fP (\fBsize_type\fP \fBindex\fP)"
.br
.ti -1c
.RI "\fBconst_reference\fP \fBoperator[]\fP (\fBsize_type\fP \fBindex\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBpointer\fP \fBoperator=\fP (\fBpointer\fP \fBother\fP) \fBnoexcept\fP"
.br
.ti -1c
.RI "\fBpointer\fP \fBoperator=\fP (\fBpointer\fP \fBother\fP) \fBvolatile\fP \fBnoexcept\fP"
.br
.ti -1c
.RI "\fBvoid\fP \fBis_locked\fP (\fBconst\fP \fBbool\fP \fBvalue\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBis_locked\fP () \fBconst\fP"
.br
.in -1c
.SS "Geschützte Attribute"

.in +1c
.ti -1c
.RI "\fBpointer\fP \fBm_pRawBuffer\fP"
.br
.ti -1c
.RI "\fBsize_type\fP \fBm_sSize\fP"
.br
.ti -1c
.RI "\fBsize_type\fP \fBm_sUsed\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBm_bOwnMem\fP"
.br
.ti -1c
.RI "\fBallocator\fP \fBm_allocator\fP"
.br
.ti -1c
.RI "std::atomic< \fBbool\fP > \fBm_is2Device\fP"
.br
.in -1c
.SH "Ausführliche Beschreibung"
.PP 

.SS "template<\fBtypename\fP \fBTVALUE\fP, \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP = vkst::default_allocator>
.br
class vkst::buffer< TVALUE, TALIGNMENT, TALLOCATOR >"
.PP
Definiert in Zeile \fB12\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SH "Dokumentation der benutzerdefinierten Datentypen"
.PP 
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::allocator =  \fBTALLOCATOR\fP"

.PP
Definiert in Zeile \fB16\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::const_iterator =  \fBconst\fP \fBvalue_type\fP*"

.PP
Definiert in Zeile \fB27\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::const_pointer =  \fBconst\fP \fBvalue_type\fP*"

.PP
Definiert in Zeile \fB22\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::const_reference =  \fBconst\fP \fBvalue_type\fP&"

.PP
Definiert in Zeile \fB21\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::difference_type =  \fBptrdiff_t\fP"

.PP
Definiert in Zeile \fB25\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::iterator =  \fBpointer\fP"

.PP
Definiert in Zeile \fB26\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::iterator_category =  std::random_access_iterator_tag"

.PP
Definiert in Zeile \fB24\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::pointer =  \fBvalue_type\fP*"

.PP
Definiert in Zeile \fB17\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::reference =  \fBvalue_type\fP&"

.PP
Definiert in Zeile \fB18\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::self_type =  \fBbuffer\fP<\fBTVALUE\fP,\fBTALIGNMENT\fP, \fBTALLOCATOR\fP>"

.PP
Definiert in Zeile \fB14\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::size_type =  \fBsize_t\fP"

.PP
Definiert in Zeile \fB19\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::value_type =  \fBTVALUE\fP __attribute__((\fB__vector_size__\fP(\fBTALIGNMENT\fP), \fB__aligned__\fP(\fBTALIGNMENT\fP)))"

.PP
Definiert in Zeile \fB15\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SH "Beschreibung der Konstruktoren und Destruktoren"
.PP 
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::buffer (\fBsize_type\fP size)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Consructs and allocates the Buffer\&. 
.PP
Definiert in Zeile \fB32\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::buffer (\fBpointer\fP buffer, \fBsize_type\fP size)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Consructs the buffer from a given memory pointer\&. 
.PP
\fBParameter\fP
.RS 4
\fIsize\fP The size of the buffer 
.br
\fIbuffer\fP The using pointer for this buffer 
.RE
.PP
\fBZu beachten\fP
.RS 4
This pointer not deallocated, from buffer on deconstruction 
.RE
.PP

.PP
Definiert in Zeile \fB44\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::buffer (\fBconst_pointer\fP buffer, \fBsize_type\fP size)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Consructs and allocates the Buffer\&. copies the contents of the supplied memory into the buffer\&. 
.PP
\fBParameter\fP
.RS 4
\fIsize\fP The size of the buffer 
.br
\fIbuffer\fP The using pointer for this buffer 
.RE
.PP

.PP
Definiert in Zeile \fB54\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::buffer (\fBconst\fP \fBself_type\fP & other)\fC [delete]\fP, \fC [noexcept]\fP"

.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::~\fBbuffer\fP ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Deconstrut the buffer\&. Is allocated the memory by buffer, then deallocated it\&. 
.PP
Definiert in Zeile \fB67\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SH "Dokumentation der Elementfunktionen"
.PP 
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvoid\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::append (\fBconst\fP \fBself_type\fP & refBuffer)\fC [inline]\fP"

.PP
Resizes this buffer and appends the given data\&. 
.PP
\fBParameter\fP
.RS 4
\fIrefBuffer\fP The other buffer to append\&. 
.RE
.PP

.PP
Definiert in Zeile \fB128\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvoid\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::append (\fBconst_pointer\fP pBuffer, std::size_t sBufferSize)\fC [inline]\fP"

.PP
Resizes this buffer and appends the given data\&. 
.PP
\fBParameter\fP
.RS 4
\fIpBuffer\fP The array of data to append\&. 
.br
\fIsBufferSize\fP The number elements in the array\&. 
.RE
.PP

.PP
Definiert in Zeile \fB107\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvoid\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::append (\fBvalue_type\fP value)\fC [inline]\fP"

.PP
Resizes this buffer and appends the given data\&. 
.PP
\fBParameter\fP
.RS 4
\fIvalue\fP The value to append\&. 
.RE
.PP

.PP
Definiert in Zeile \fB119\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvoid\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::assign (\fBconst_pointer\fP pBuffer, \fBsize_type\fP size)\fC [inline]\fP"

.PP
Assigns the argument buffer to this buffer\&. 
.PP
\fBZu beachten\fP
.RS 4
If necessary, resizes the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB194\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBiterator\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::begin ()\fC [inline]\fP"

.PP
Get the iterator to the beginning of the buffer\&. 
.PP
\fBRückgabe\fP
.RS 4
The iterator to the beginning of the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB82\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBconst_iterator\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::begin () const\fC [inline]\fP"

.PP
Get the iterator to the beginning of the buffer\&. 
.PP
\fBRückgabe\fP
.RS 4
The iterator to the beginning of the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB88\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBbool\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::change_size (\fBsize_type\fP newSize, \fBbool\fP bReserve = \fC\fBtrue\fP\fP)\fC [inline]\fP"

.PP
Change the buffer size\&. 
.PP
\fBZu beachten\fP
.RS 4
Externally memory can not change\&.
.RE
.PP
\fBParameter\fP
.RS 4
\fInewSize\fP The new size for this buffer\&. 
.br
\fIbReserve\fP If true then the content of the old buffer is copied over to the new buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB170\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvoid\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::clear ()\fC [inline]\fP"

.PP
Clear the used content\&. 
.PP
Definiert in Zeile \fB207\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBself_type\fP * \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::copy (\fBsize_t\fP size)\fC [inline]\fP"

.PP
Definiert in Zeile \fB72\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBiterator\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::end ()\fC [inline]\fP"

.PP
Get the iterator to end of the buffer\&. 
.PP
\fBRückgabe\fP
.RS 4
The iterator to end of the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB94\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBconst_iterator\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::end () const\fC [inline]\fP"

.PP
Get the iterator to end of the buffer\&. 
.PP
\fBRückgabe\fP
.RS 4
The iterator to end of the buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB100\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBpointer\fP * \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::get_raw () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Definiert in Zeile \fB230\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBconstexpr\fP \fBsize_type\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::get_size () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Get the allocated memory size in elements\&. 
.PP
\fBRückgabe\fP
.RS 4
The allocated memory size in elements\&. 
.RE
.PP

.PP
Definiert in Zeile \fB240\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBconstexpr\fP \fBsize_type\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::get_size_bytes () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Get the allocated memory size in bytes\&. 
.PP
\fBRückgabe\fP
.RS 4
The allocated memory size in bytes\&. 
.RE
.PP

.PP
Definiert in Zeile \fB246\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBconstexpr\fP \fBsize_type\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::get_used () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Get the used size of the buffer in elements\&. 
.PP
\fBRückgabe\fP
.RS 4
The used size of the buffer in elements\&. 
.RE
.PP

.PP
Definiert in Zeile \fB252\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBconstexpr\fP \fBsize_type\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::get_used_bytes () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Get the used size of the buffer in bytes\&. 
.PP
\fBRückgabe\fP
.RS 4
The used size of the buffer in bytes\&. 
.RE
.PP

.PP
Definiert in Zeile \fB258\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBconstexpr\fP \fBbool\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::is_empty () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
is the buffer empty? 
.PP
\fBRückgabe\fP
.RS 4
If true then is the buffer empty and if false then not\&. 
.RE
.PP

.PP
Definiert in Zeile \fB228\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBbool\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::is_equel (\fBconst\fP \fBbuffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP > & other) const\fC [inline]\fP"

.PP
Is the given buffer equel with this? 
.PP
\fBParameter\fP
.RS 4
\fIother\fP Reference to the comparing buffer 
.RE
.PP
\fBRückgabe\fP
.RS 4
true The given buffer is equel with this, false when not\&. 
.RE
.PP

.PP
Definiert in Zeile \fB216\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBconstexpr\fP \fBbool\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::is_full () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
is the buffer full? 
.PP
\fBRückgabe\fP
.RS 4
If true then is the buffer full and if false then not\&. 
.RE
.PP

.PP
Definiert in Zeile \fB235\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBbool\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::is_locked () const\fC [inline]\fP"

.PP
Definiert in Zeile \fB293\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvoid\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::is_locked (\fBconst\fP \fBbool\fP value)\fC [inline]\fP"

.PP
Definiert in Zeile \fB292\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBbool\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >\fB::operator!\fP= (\fBconst\fP \fBbuffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP > & other) const\fC [inline]\fP"

.PP
Not compare operator\&. 
.PP
Definiert in Zeile \fB269\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBself_type\fP & \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >\fB::operator\fP= (\fBconst\fP \fBself_type\fP &) volatile\fC [delete]\fP"

.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBself_type\fP & \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >\fB::operator\fP= (\fBconst\fP \fBself_type\fP &)\fC [delete]\fP"

.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBpointer\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >\fB::operator\fP= (\fBpointer\fP other)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Definiert in Zeile \fB285\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBpointer\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >\fB::operator\fP= (\fBpointer\fP other) volatile\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Definiert in Zeile \fB289\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBbool\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >\fB::operator\fP== (\fBconst\fP \fBbuffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP > & other) const\fC [inline]\fP"

.PP
Compare operator\&. 
.PP
Definiert in Zeile \fB263\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBreference\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >\fB::operator\fP[] (\fBsize_type\fP index)\fC [inline]\fP"

.PP
Definiert in Zeile \fB273\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBconst_reference\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >\fB::operator\fP[] (\fBsize_type\fP index) const\fC [inline]\fP"

.PP
Definiert in Zeile \fB279\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBbool\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::resize (\fBsize_type\fP newSize, \fBbool\fP bReserve = \fC\fBtrue\fP\fP)\fC [inline]\fP"

.PP
Resizes the buffer capacity and size\&. 
.PP
\fBZu beachten\fP
.RS 4
Externally memory can not resize\&.
.RE
.PP
\fBParameter\fP
.RS 4
\fInewSize\fP The new size for this buffer\&. 
.br
\fIbReserve\fP If true then the content of the old buffer is copied over to the new buffer\&. 
.RE
.PP

.PP
Definiert in Zeile \fB139\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SH "Dokumentation der Felder"
.PP 
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBallocator\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::m_allocator\fC [protected]\fP"

.PP
Definiert in Zeile \fB342\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBbool\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::m_bOwnMem\fC [protected]\fP"

.PP
Definiert in Zeile \fB341\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> std::atomic<\fBbool\fP> \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::m_is2Device\fC [protected]\fP"

.PP
Definiert in Zeile \fB343\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBpointer\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::m_pRawBuffer\fC [protected]\fP"

.PP
Definiert in Zeile \fB336\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBsize_type\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::m_sSize\fC [protected]\fP"

.PP
Definiert in Zeile \fB338\fP der Datei \fBvkstBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBchar\fP TALIGNMENT = alignment_of<TVALUE>::res, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBsize_type\fP \fBvkst::buffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >::m_sUsed\fC [protected]\fP"

.PP
Definiert in Zeile \fB339\fP der Datei \fBvkstBuffer\&.hpp\fP\&.

.SH "Autor"
.PP 
Automatisch erzeugt von Doxygen für vkbst aus dem Quellcode\&.
