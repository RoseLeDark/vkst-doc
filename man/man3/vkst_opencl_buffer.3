.TH "vkst::opencl_buffer< TVALUE, TLOCKTYPE, TALLOCATOR >" 3 "vkbst" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vkst::opencl_buffer< TVALUE, TLOCKTYPE, TALLOCATOR >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vkstOpenCLBuffer\&.hpp>\fP
.PP
Abgeleitet von \fBvkst::buffer< TVALUE, TALIGNMENT, TALLOCATOR >\fP\&.
.SS "Öffentliche Typen"

.in +1c
.ti -1c
.RI "\fBusing\fP \fBbase_type\fP = \fBbuffer\fP< \fBTVALUE\fP, 16, \fBTALLOCATOR\fP >"
.br
.ti -1c
.RI "\fBusing\fP \fBlock_type\fP = \fBTLOCKTYPE\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBself_type\fP = \fBopencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTLOCKTYPE\fP >"
.br
.ti -1c
.RI "\fBusing\fP \fBpointer\fP = \fBtypename\fP \fBbase_type::pointer\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBreference\fP = \fBtypename\fP base_type::reference"
.br
.ti -1c
.RI "\fBusing\fP \fBsize_type\fP = \fBtypename\fP \fBbase_type::size_type\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBconst_pointer\fP = \fBtypename\fP \fBbase_type::const_pointer\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBconst_reference\fP = \fBtypename\fP base_type::const_reference"
.br
.in -1c

Öffentliche Typen geerbt von \fBvkst::buffer< TVALUE, TALIGNMENT, TALLOCATOR >\fP
.in +1c
.ti -1c
.RI "\fBusing\fP \fBself_type\fP = \fBbuffer\fP< \fBTVALUE\fP, \fBTALIGNMENT\fP, \fBTALLOCATOR\fP >"
.br
.ti -1c
.RI "\fBusing\fP \fBvalue_type\fP = \fBTVALUE\fP __attribute__((\fB__vector_size__\fP(\fBTALIGNMENT\fP), \fB__aligned__\fP(\fBTALIGNMENT\fP)))"
.br
.ti -1c
.RI "\fBusing\fP \fBallocator\fP = \fBTALLOCATOR\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBpointer\fP = \fBvalue_type\fP *"
.br
.ti -1c
.RI "\fBusing\fP \fBreference\fP = \fBvalue_type\fP &"
.br
.ti -1c
.RI "\fBusing\fP \fBsize_type\fP = \fBsize_t\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBconst_reference\fP = \fBconst\fP \fBvalue_type\fP &"
.br
.ti -1c
.RI "\fBusing\fP \fBconst_pointer\fP = \fBconst\fP \fBvalue_type\fP *"
.br
.ti -1c
.RI "\fBusing\fP \fBiterator_category\fP = std::random_access_iterator_tag"
.br
.ti -1c
.RI "\fBusing\fP \fBdifference_type\fP = \fBptrdiff_t\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBiterator\fP = \fBpointer\fP"
.br
.ti -1c
.RI "\fBusing\fP \fBconst_iterator\fP = \fBconst\fP \fBvalue_type\fP *"
.br
.in -1c
.SS "Öffentliche Methoden"

.in +1c
.ti -1c
.RI "\fBopencl_buffer\fP (\fBcl_context\fP \fBcontext\fP, \fBbool\fP \fBreadOnly\fP)"
.br
.ti -1c
.RI "\fBopencl_buffer\fP (\fBcl_context\fP \fBcontext\fP, \fBsize_type\fP \fBsize\fP, \fBbool\fP \fBreadOnly\fP=\fBfalse\fP) \fBnoexcept\fP"
.br
.RI "Consructs and allocates the Buffer\&. "
.ti -1c
.RI "\fBopencl_buffer\fP (\fBcl_context\fP \fBcontext\fP, \fBpointer\fP \fBbuffer\fP, \fBsize_type\fP \fBsize\fP, \fBbool\fP \fBreadOnly\fP=\fBfalse\fP) \fBnoexcept\fP"
.br
.ti -1c
.RI "\fBopencl_buffer\fP (\fBcl_context\fP \fBcontext\fP, \fBconst_pointer\fP \fBbuffer\fP, \fBsize_type\fP \fBsize\fP, \fBbool\fP \fBreadOnly\fP=\fBfalse\fP) \fBnoexcept\fP"
.br
.ti -1c
.RI "\fBopencl_buffer\fP (\fBconst\fP \fBself_type\fP &\fBother\fP) \fBnoexcept\fP=\fBdelete\fP"
.br
.ti -1c
.RI "\fBself_type\fP & \fBoperator=\fP (\fBconst\fP \fBself_type\fP &)=\fBdelete\fP"
.br
.ti -1c
.RI "\fBself_type\fP & \fBoperator=\fP (\fBconst\fP \fBself_type\fP &) \fBvolatile\fP=\fBdelete\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBlock\fP (\fBcl_command_queue\fP queue, \fBbool\fP \fBwrite2Device\fP=\fBtrue\fP)"
.br
.ti -1c
.RI "\fBbool\fP \fBunlock\fP (\fBcl_command_queue\fP queue, \fBbool\fP \fBreadDevice\fP)"
.br
.ti -1c
.RI "\fBcl_mem\fP \fBoperator cl_mem\fP ()"
.br
.in -1c

Öffentliche Methoden geerbt von \fBvkst::buffer< TVALUE, TALIGNMENT, TALLOCATOR >\fP
.in +1c
.ti -1c
.RI "\fBbuffer\fP (\fBsize_type\fP \fBsize\fP) \fBnoexcept\fP"
.br
.RI "Consructs and allocates the Buffer\&. "
.ti -1c
.RI "\fBbuffer\fP (\fBpointer\fP \fBbuffer\fP, \fBsize_type\fP \fBsize\fP) \fBnoexcept\fP"
.br
.RI "Consructs the buffer from a given memory pointer\&. "
.ti -1c
.RI "\fBbuffer\fP (\fBconst_pointer\fP \fBbuffer\fP, \fBsize_type\fP \fBsize\fP) \fBnoexcept\fP"
.br
.RI "Consructs and allocates the Buffer\&. copies the contents of the supplied memory into the buffer\&. "
.ti -1c
.RI "\fBbuffer\fP (\fBconst\fP \fBself_type\fP &\fBother\fP) \fBnoexcept\fP=\fBdelete\fP"
.br
.ti -1c
.RI "\fBself_type\fP & \fBoperator=\fP (\fBconst\fP \fBself_type\fP &)=\fBdelete\fP"
.br
.ti -1c
.RI "\fBself_type\fP & \fBoperator=\fP (\fBconst\fP \fBself_type\fP &) \fBvolatile\fP=\fBdelete\fP"
.br
.ti -1c
.RI "\fB~buffer\fP () \fBnoexcept\fP"
.br
.RI "Deconstrut the buffer\&. Is allocated the memory by buffer, then deallocated it\&. "
.ti -1c
.RI "\fBself_type\fP * \fBcopy\fP (\fBsize_t\fP \fBsize\fP)"
.br
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP ()"
.br
.RI "Get the iterator to the beginning of the buffer\&. "
.ti -1c
.RI "\fBconst_iterator\fP \fBbegin\fP () \fBconst\fP"
.br
.RI "Get the iterator to the beginning of the buffer\&. "
.ti -1c
.RI "\fBiterator\fP \fBend\fP ()"
.br
.RI "Get the iterator to end of the buffer\&. "
.ti -1c
.RI "\fBconst_iterator\fP \fBend\fP () \fBconst\fP"
.br
.RI "Get the iterator to end of the buffer\&. "
.ti -1c
.RI "\fBvoid\fP \fBappend\fP (\fBconst_pointer\fP \fBpBuffer\fP, std::size_t \fBsBufferSize\fP)"
.br
.RI "Resizes this buffer and appends the given data\&. "
.ti -1c
.RI "\fBvoid\fP \fBappend\fP (\fBvalue_type\fP \fBvalue\fP)"
.br
.RI "Resizes this buffer and appends the given data\&. "
.ti -1c
.RI "\fBvoid\fP \fBappend\fP (\fBconst\fP \fBself_type\fP &\fBrefBuffer\fP)"
.br
.RI "Resizes this buffer and appends the given data\&. "
.ti -1c
.RI "\fBbool\fP \fBresize\fP (\fBsize_type\fP \fBnewSize\fP, \fBbool\fP \fBbReserve\fP=\fBtrue\fP)"
.br
.RI "Resizes the buffer capacity and size\&. "
.ti -1c
.RI "\fBbool\fP \fBchange_size\fP (\fBsize_type\fP \fBnewSize\fP, \fBbool\fP \fBbReserve\fP=\fBtrue\fP)"
.br
.RI "Change the buffer size\&. "
.ti -1c
.RI "\fBvoid\fP \fBassign\fP (\fBconst_pointer\fP \fBpBuffer\fP, \fBsize_type\fP \fBsize\fP)"
.br
.RI "Assigns the argument buffer to this buffer\&. "
.ti -1c
.RI "\fBvoid\fP \fBclear\fP ()"
.br
.RI "Clear the used content\&. "
.ti -1c
.RI "\fBbool\fP \fBis_equel\fP (\fBconst\fP \fBbuffer\fP &\fBother\fP) \fBconst\fP"
.br
.RI "Is the given buffer equel with this? "
.ti -1c
.RI "\fBconstexpr\fP \fBbool\fP \fBis_empty\fP () \fBconst\fP \fBnoexcept\fP"
.br
.RI "is the buffer empty? "
.ti -1c
.RI "\fBconstexpr\fP \fBbool\fP \fBis_full\fP () \fBconst\fP \fBnoexcept\fP"
.br
.RI "is the buffer full? "
.ti -1c
.RI "\fBconstexpr\fP \fBsize_type\fP \fBget_size\fP () \fBconst\fP \fBnoexcept\fP"
.br
.RI "Get the allocated memory size in elements\&. "
.ti -1c
.RI "\fBconstexpr\fP \fBsize_type\fP \fBget_size_bytes\fP () \fBconst\fP \fBnoexcept\fP"
.br
.RI "Get the allocated memory size in bytes\&. "
.ti -1c
.RI "\fBconstexpr\fP \fBsize_type\fP \fBget_used\fP () \fBconst\fP \fBnoexcept\fP"
.br
.RI "Get the used size of the buffer in elements\&. "
.ti -1c
.RI "\fBconstexpr\fP \fBsize_type\fP \fBget_used_bytes\fP () \fBconst\fP \fBnoexcept\fP"
.br
.RI "Get the used size of the buffer in bytes\&. "
.ti -1c
.RI "\fBbool\fP \fBoperator==\fP (\fBconst\fP \fBbuffer\fP &\fBother\fP) \fBconst\fP"
.br
.RI "Compare operator\&. "
.ti -1c
.RI "\fBbool\fP \fBoperator!=\fP (\fBconst\fP \fBbuffer\fP &\fBother\fP) \fBconst\fP"
.br
.RI "Not compare operator\&. "
.ti -1c
.RI "\fBreference\fP \fBoperator[]\fP (\fBsize_type\fP \fBindex\fP)"
.br
.ti -1c
.RI "\fBconst_reference\fP \fBoperator[]\fP (\fBsize_type\fP \fBindex\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBpointer\fP \fBoperator=\fP (\fBpointer\fP \fBother\fP) \fBnoexcept\fP"
.br
.ti -1c
.RI "\fBpointer\fP \fBoperator=\fP (\fBpointer\fP \fBother\fP) \fBvolatile\fP \fBnoexcept\fP"
.br
.in -1c
.SS "Geschützte Methoden"

.in +1c
.ti -1c
.RI "\fBvirtual\fP \fBvoid\fP \fBcreate_internal_gpu_buffer\fP ()"
.br
.in -1c
.SS "Geschützte Attribute"

.in +1c
.ti -1c
.RI "\fBcl_context\fP \fBm_cContext\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBm_bReadOnly\fP"
.br
.ti -1c
.RI "\fBlock_type\fP \fBm_lock\fP"
.br
.ti -1c
.RI "\fBcl_mem\fP \fBm_clBuffer\fP"
.br
.in -1c

Geschützte Attribute geerbt von \fBvkst::buffer< TVALUE, TALIGNMENT, TALLOCATOR >\fP
.in +1c
.ti -1c
.RI "\fBpointer\fP \fBm_pRawBuffer\fP"
.br
.ti -1c
.RI "\fBsize_type\fP \fBm_sSize\fP"
.br
.ti -1c
.RI "\fBsize_type\fP \fBm_sUsed\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBm_bOwnMem\fP"
.br
.ti -1c
.RI "\fBallocator\fP \fBm_allocator\fP"
.br
.ti -1c
.RI "std::atomic< \fBbool\fP > \fBm_is2Device\fP"
.br
.in -1c
.SH "Ausführliche Beschreibung"
.PP 

.SS "template<\fBtypename\fP \fBTVALUE\fP, \fBclass\fP \fBTLOCKTYPE\fP = std::mutex, \fBclass\fP \fBTALLOCATOR\fP = vkst::default_allocator>
.br
class vkst::opencl_buffer< TVALUE, TLOCKTYPE, TALLOCATOR >"
.PP
\fBTemplate-Parameter\fP
.RS 4
\fITVALUE\fP 
.br
\fITLOCKTYPE\fP 
.br
\fITALLOCATOR\fP 
.RE
.PP

.PP
Definiert in Zeile \fB21\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SH "Dokumentation der benutzerdefinierten Datentypen"
.PP 
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::base_type =  \fBbuffer\fP<\fBTVALUE\fP, 16, \fBTALLOCATOR\fP>"

.PP
Definiert in Zeile \fB23\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::const_pointer =  \fBtypename\fP \fBbase_type::const_pointer\fP"

.PP
Definiert in Zeile \fB30\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::const_reference =  \fBtypename\fP base_type::const_reference"

.PP
Definiert in Zeile \fB31\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::lock_type =  \fBTLOCKTYPE\fP"

.PP
Definiert in Zeile \fB24\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::pointer =  \fBtypename\fP \fBbase_type::pointer\fP"

.PP
Definiert in Zeile \fB27\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::reference =  \fBtypename\fP base_type::reference"

.PP
Definiert in Zeile \fB28\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::self_type =  \fBopencl_buffer\fP<\fBTVALUE\fP,\fBTLOCKTYPE\fP,\fBTLOCKTYPE\fP>"

.PP
Definiert in Zeile \fB25\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBusing\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::size_type =  \fBtypename\fP \fBbase_type::size_type\fP"

.PP
Definiert in Zeile \fB29\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SH "Beschreibung der Konstruktoren und Destruktoren"
.PP 
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::opencl_buffer (\fBcl_context\fP context, \fBbool\fP readOnly)\fC [inline]\fP"

.PP
Definiert in Zeile \fB33\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::opencl_buffer (\fBcl_context\fP context, \fBsize_type\fP size, \fBbool\fP readOnly = \fC\fBfalse\fP\fP)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Consructs and allocates the Buffer\&. 
.PP
Definiert in Zeile \fB41\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::opencl_buffer (\fBcl_context\fP context, \fBpointer\fP buffer, \fBsize_type\fP size, \fBbool\fP readOnly = \fC\fBfalse\fP\fP)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Definiert in Zeile \fB46\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::opencl_buffer (\fBcl_context\fP context, \fBconst_pointer\fP buffer, \fBsize_type\fP size, \fBbool\fP readOnly = \fC\fBfalse\fP\fP)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Definiert in Zeile \fB51\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::opencl_buffer (\fBconst\fP \fBself_type\fP & other)\fC [delete]\fP, \fC [noexcept]\fP"

.SH "Dokumentation der Elementfunktionen"
.PP 
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBvirtual\fP \fBvoid\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::create_internal_gpu_buffer ()\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Definiert in Zeile \fB87\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBbool\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::lock (\fBcl_command_queue\fP queue, \fBbool\fP write2Device = \fC\fBtrue\fP\fP)\fC [inline]\fP"

.PP
Definiert in Zeile \fB60\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBcl_mem\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >\fB::operator\fP \fBcl_mem\fP ()\fC [inline]\fP"

.PP
Definiert in Zeile \fB85\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBself_type\fP & \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >\fB::operator\fP= (\fBconst\fP \fBself_type\fP &) volatile\fC [delete]\fP"

.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBself_type\fP & \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >\fB::operator\fP= (\fBconst\fP \fBself_type\fP &)\fC [delete]\fP"

.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBbool\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::unlock (\fBcl_command_queue\fP queue, \fBbool\fP readDevice)\fC [inline]\fP"

.PP
Definiert in Zeile \fB73\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SH "Dokumentation der Felder"
.PP 
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBbool\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::m_bReadOnly\fC [protected]\fP"

.PP
Definiert in Zeile \fB96\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBcl_context\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::m_cContext\fC [protected]\fP"

.PP
Definiert in Zeile \fB95\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBcl_mem\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::m_clBuffer\fC [protected]\fP"

.PP
Definiert in Zeile \fB98\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<\fBtypename\fP \fBTVALUE\fP , \fBclass\fP \fBTLOCKTYPE\fP  = std::mutex, \fBclass\fP \fBTALLOCATOR\fP  = vkst::default_allocator> \fBlock_type\fP \fBvkst::opencl_buffer\fP< \fBTVALUE\fP, \fBTLOCKTYPE\fP, \fBTALLOCATOR\fP >::m_lock\fC [protected]\fP"

.PP
Definiert in Zeile \fB97\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.

.SH "Autor"
.PP 
Automatisch erzeugt von Doxygen für vkbst aus dem Quellcode\&.
