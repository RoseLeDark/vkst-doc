.TH "vkst::opencl_buffer< TBUFFER, TFLAGS >" 3 "vkbst" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vkst::opencl_buffer< TBUFFER, TFLAGS > \- A template class representing an OpenCL buffer with customizable flags\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vkstOpenCLBuffer\&.hpp>\fP
.SS "Öffentliche Typen"

.in +1c
.ti -1c
.RI "using \fBbuffer_type\fP = TBUFFER"
.br
.RI "The type of the buffer used in this class\&. "
.ti -1c
.RI "using \fBlock_type\fP = std::mutex"
.br
.RI "Type of the lock used to synchronize access to the buffer\&. "
.ti -1c
.RI "using \fBself_type\fP = \fBopencl_buffer\fP< \fBbuffer_type\fP, TFLAGS >"
.br
.RI "Alias for the type of this class\&. "
.ti -1c
.RI "using \fBpointer\fP = typename TBUFFER::pointer"
.br
.RI "The pointer type used by the buffer\&. "
.ti -1c
.RI "using \fBreference\fP = typename TBUFFER::reference"
.br
.RI "The reference type used by the buffer\&. "
.ti -1c
.RI "using \fBsize_type\fP = typename TBUFFER::size_type"
.br
.RI "The size type used by the buffer\&. "
.ti -1c
.RI "using \fBconst_pointer\fP = typename TBUFFER::const_pointer"
.br
.RI "The constant pointer type used by the buffer\&. "
.ti -1c
.RI "using \fBconst_reference\fP = typename TBUFFER::const_reference"
.br
.RI "The constant reference type used by the buffer\&. "
.ti -1c
.RI "using \fBvalue_type\fP = typename TBUFFER::value_type"
.br
.RI "The value type used by the buffer\&. "
.ti -1c
.RI "using \fBflag_type\fP = cl_mem_flags"
.br
.RI "Type representing the OpenCL memory flags\&. "
.ti -1c
.RI "using \fBcompress_type\fP = \fBcompression_filter\fP< TBUFFER >"
.br
.RI "The compression filter type used for the buffer\&. "
.in -1c
.SS "Öffentliche Methoden"

.in +1c
.ti -1c
.RI "\fBopencl_buffer\fP (\fBbuffer_type\fP &\fBbuffer\fP, cl_context context)"
.br
.RI "Constructor for the \fBopencl_buffer\fP class\&. "
.ti -1c
.RI "\fBopencl_buffer\fP (const \fBself_type\fP &other) noexcept=delete"
.br
.ti -1c
.RI "\fBself_type\fP & \fBoperator=\fP (const \fBself_type\fP &)=delete"
.br
.ti -1c
.RI "\fBself_type\fP & \fBoperator=\fP (const \fBself_type\fP &) volatile=delete"
.br
.ti -1c
.RI "bool \fBassign_to_gpu\fP (cl_command_queue queue, bool write2Device=true)"
.br
.RI "Transfers data from the buffer to the GPU\&. "
.ti -1c
.RI "bool \fBrequire\fP (cl_command_queue queue, bool readDevice)"
.br
.RI "Reads data from the GPU and updates the buffer\&. "
.ti -1c
.RI "bool \fBis_flag\fP (\fBflag_type\fP flag) const"
.br
.RI "Checks if the given flag is set in the buffer's flags\&. "
.ti -1c
.RI "bool \fBcan_read\fP ()"
.br
.RI "Determines if the buffer is readable\&. "
.ti -1c
.RI "bool \fBcan_write\fP ()"
.br
.RI "Determines if the buffer is writable\&. "
.ti -1c
.RI "void \fBadd_flag\fP (\fBflag_type\fP flag)"
.br
.RI "Adds a flag to the buffer's flags\&. "
.ti -1c
.RI "void \fBremove_flag\fP (\fBflag_type\fP flag)"
.br
.RI "Removes a flag from the buffer's flags\&. "
.in -1c
.SS "Geschützte Methoden"

.in +1c
.ti -1c
.RI "void \fBcreate_internal_gpu_buffer\fP ()"
.br
.in -1c
.SS "Geschützte Attribute"

.in +1c
.ti -1c
.RI "\fBbuffer_type\fP & \fBm_refBuffer\fP"
.br
.RI "Reference to the buffer being managed\&. "
.ti -1c
.RI "cl_context \fBm_cContext\fP"
.br
.RI "The OpenCL context associated with the buffer\&. "
.ti -1c
.RI "\fBlock_type\fP \fBm_lock\fP"
.br
.RI "Mutex lock to ensure thread safety\&. "
.ti -1c
.RI "cl_mem \fBm_clBuffer\fP"
.br
.RI "The OpenCL memory buffer object\&. "
.ti -1c
.RI "bool \fBm_bHostPtr\fP"
.br
.RI "Flag indicating whether the buffer is using a host pointer\&. The \fCm_bHostPtr\fP flag indicates whether the OpenCL buffer is created using a pointer that is accessible on the host side (as opposed to having a separate device memory allocation)\&. "
.ti -1c
.RI "\fBflag_type\fP \fBm_fFlags\fP"
.br
.RI "The flags that describe buffer permissions and characteristics\&. These flags define how the buffer is used in OpenCL operations\&. For example, flags like \fCCL_MEM_READ_WRITE\fP, \fCCL_MEM_READ_ONLY\fP, \fCCL_MEM_WRITE_ONLY\fP, etc\&. determine whether the buffer can be read from, written to, or both\&. "
.in -1c
.SH "Ausführliche Beschreibung"
.PP 

.SS "template<typename TBUFFER, cl_mem_flags TFLAGS = CL_MEM_READ_WRITE>
.br
class vkst::opencl_buffer< TBUFFER, TFLAGS >"A template class representing an OpenCL buffer with customizable flags\&. 


.PP
\fBTemplate-Parameter\fP
.RS 4
\fITBUFFER\fP The type of the buffer (e\&.g\&., a custom buffer type)\&. 
.br
\fITFLAGS\fP The OpenCL memory flags to be used for the buffer (default: CL_MEM_READ_WRITE)\&.
.RE
.PP
This class provides functionality to create and manage an OpenCL buffer, including operations such as transferring data to/from the buffer and supporting compression\&. 
.PP
Definiert in Zeile \fB25\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SH "Dokumentation der benutzerdefinierten Datentypen"
.PP 
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> using \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::buffer_type =  TBUFFER"

.PP
The type of the buffer used in this class\&. 
.PP
Definiert in Zeile \fB28\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> using \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::compress_type =  \fBcompression_filter\fP<TBUFFER>"

.PP
The compression filter type used for the buffer\&. 
.PP
Definiert in Zeile \fB58\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> using \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::const_pointer =  typename TBUFFER::const_pointer"

.PP
The constant pointer type used by the buffer\&. 
.PP
Definiert in Zeile \fB46\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> using \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::const_reference =  typename TBUFFER::const_reference"

.PP
The constant reference type used by the buffer\&. 
.PP
Definiert in Zeile \fB49\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> using \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::flag_type =  cl_mem_flags"

.PP
Type representing the OpenCL memory flags\&. 
.PP
Definiert in Zeile \fB55\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> using \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::lock_type =  std::mutex"

.PP
Type of the lock used to synchronize access to the buffer\&. 
.PP
Definiert in Zeile \fB31\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> using \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::pointer =  typename TBUFFER::pointer"

.PP
The pointer type used by the buffer\&. 
.PP
Definiert in Zeile \fB37\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> using \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::reference =  typename TBUFFER::reference"

.PP
The reference type used by the buffer\&. 
.PP
Definiert in Zeile \fB40\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> using \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::self_type =  \fBopencl_buffer\fP<\fBbuffer_type\fP, TFLAGS>"

.PP
Alias for the type of this class\&. 
.PP
Definiert in Zeile \fB34\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> using \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::size_type =  typename TBUFFER::size_type"

.PP
The size type used by the buffer\&. 
.PP
Definiert in Zeile \fB43\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> using \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::value_type =  typename TBUFFER::value_type"

.PP
The value type used by the buffer\&. 
.PP
Definiert in Zeile \fB52\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SH "Beschreibung der Konstruktoren und Destruktoren"
.PP 
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::opencl_buffer (\fBbuffer_type\fP & buffer, cl_context context)\fC [inline]\fP"

.PP
Constructor for the \fBopencl_buffer\fP class\&. 
.PP
\fBParameter\fP
.RS 4
\fIbuffer\fP The buffer to be wrapped in this OpenCL buffer\&. 
.br
\fIcontext\fP The OpenCL context in which the buffer will be created\&. 
.RE
.PP

.PP
Definiert in Zeile \fB65\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::opencl_buffer (const \fBself_type\fP & other)\fC [delete]\fP, \fC [noexcept]\fP"

.SH "Dokumentation der Elementfunktionen"
.PP 
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> void \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::add_flag (\fBflag_type\fP flag)\fC [inline]\fP"

.PP
Adds a flag to the buffer's flags\&. This function adds a specified flag to the current buffer's flags\&. The buffer's flags are updated to include the provided flag\&.
.PP
\fBParameter\fP
.RS 4
\fIflag\fP The flag to be added to the current buffer's flags (e\&.g\&., \fCCL_MEM_READ_ONLY\fP)\&. 
.RE
.PP

.PP
Definiert in Zeile \fB247\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> bool \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::assign_to_gpu (cl_command_queue queue, bool write2Device = \fCtrue\fP)\fC [inline]\fP"

.PP
Transfers data from the buffer to the GPU\&. 
.PP
\fBParameter\fP
.RS 4
\fIqueue\fP The OpenCL command queue used for the write operation\&. 
.br
\fIwrite2Device\fP Flag to specify if the data should be written to the device\&. 
.RE
.PP
\fBRückgabe\fP
.RS 4
True if the transfer was successful, false otherwise\&. 
.RE
.PP

.PP
Definiert in Zeile \fB82\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> bool \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::can_read ()\fC [inline]\fP"

.PP
Determines if the buffer is readable\&. This function checks if the buffer has either \fCCL_MEM_READ_WRITE\fP or \fCCL_MEM_READ_ONLY\fP flags set, indicating that the buffer is available for reading\&.
.PP
\fBRückgabe\fP
.RS 4
\fCtrue\fP if the buffer can be read from, otherwise \fCfalse\fP\&. 
.RE
.PP

.PP
Definiert in Zeile \fB227\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> bool \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::can_write ()\fC [inline]\fP"

.PP
Determines if the buffer is writable\&. This function checks if the buffer has either \fCCL_MEM_READ_WRITE\fP or \fCCL_MEM_WRITE_ONLY\fP flags set, indicating that the buffer is available for writing\&.
.PP
\fBRückgabe\fP
.RS 4
\fCtrue\fP if the buffer can be written to, otherwise \fCfalse\fP\&. 
.RE
.PP

.PP
Definiert in Zeile \fB237\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> void \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::create_internal_gpu_buffer ()\fC [inline]\fP, \fC [protected]\fP"

.PP
Definiert in Zeile \fB265\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> bool \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::is_flag (\fBflag_type\fP flag) const\fC [inline]\fP"

.PP
Checks if the given flag is set in the buffer's flags\&. This function checks if a specific flag (such as read or write permission) is set in the current buffer's flags\&.
.PP
\fBParameter\fP
.RS 4
\fIflag\fP The flag to check (e\&.g\&., \fCCL_MEM_READ_ONLY\fP, \fCCL_MEM_WRITE_ONLY\fP)\&. 
.RE
.PP
\fBRückgabe\fP
.RS 4
\fCtrue\fP if the flag is set, otherwise \fCfalse\fP\&. 
.RE
.PP

.PP
Definiert in Zeile \fB217\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> \fBself_type\fP & \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::operator= (const \fBself_type\fP &) volatile\fC [delete]\fP"

.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> \fBself_type\fP & \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::operator= (const \fBself_type\fP &)\fC [delete]\fP"

.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> void \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::remove_flag (\fBflag_type\fP flag)\fC [inline]\fP"

.PP
Removes a flag from the buffer's flags\&. This function removes a specified flag from the current buffer's flags\&. The buffer's flags are updated to exclude the provided flag\&.
.PP
\fBParameter\fP
.RS 4
\fIflag\fP The flag to be removed from the current buffer's flags (e\&.g\&., \fCCL_MEM_READ_ONLY\fP)\&. 
.RE
.PP

.PP
Definiert in Zeile \fB260\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> bool \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::require (cl_command_queue queue, bool readDevice)\fC [inline]\fP"

.PP
Reads data from the GPU and updates the buffer\&. 
.PP
\fBParameter\fP
.RS 4
\fIqueue\fP The OpenCL command queue used for the read operation\&. 
.br
\fIreadDevice\fP Flag to specify if the data should be read from the device\&. 
.RE
.PP
\fBRückgabe\fP
.RS 4
True if the operation was successful, false otherwise\&. 
.RE
.PP

.PP
Definiert in Zeile \fB134\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SH "Dokumentation der Felder"
.PP 
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> bool \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::m_bHostPtr\fC [protected]\fP"

.PP
Flag indicating whether the buffer is using a host pointer\&. The \fCm_bHostPtr\fP flag indicates whether the OpenCL buffer is created using a pointer that is accessible on the host side (as opposed to having a separate device memory allocation)\&. 
.PP
Definiert in Zeile \fB308\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> cl_context \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::m_cContext\fC [protected]\fP"

.PP
The OpenCL context associated with the buffer\&. 
.PP
Definiert in Zeile \fB294\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> cl_mem \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::m_clBuffer\fC [protected]\fP"

.PP
The OpenCL memory buffer object\&. 
.PP
Definiert in Zeile \fB302\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> \fBflag_type\fP \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::m_fFlags\fC [protected]\fP"

.PP
The flags that describe buffer permissions and characteristics\&. These flags define how the buffer is used in OpenCL operations\&. For example, flags like \fCCL_MEM_READ_WRITE\fP, \fCCL_MEM_READ_ONLY\fP, \fCCL_MEM_WRITE_ONLY\fP, etc\&. determine whether the buffer can be read from, written to, or both\&. 
.PP
Definiert in Zeile \fB315\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> \fBlock_type\fP \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::m_lock\fC [protected]\fP"

.PP
Mutex lock to ensure thread safety\&. 
.PP
Definiert in Zeile \fB298\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.
.SS "template<typename TBUFFER , cl_mem_flags TFLAGS = CL_MEM_READ_WRITE> \fBbuffer_type\fP& \fBvkst::opencl_buffer\fP< TBUFFER, TFLAGS >::m_refBuffer\fC [protected]\fP"

.PP
Reference to the buffer being managed\&. 
.PP
Definiert in Zeile \fB290\fP der Datei \fBvkstOpenCLBuffer\&.hpp\fP\&.

.SH "Autor"
.PP 
Automatisch erzeugt von Doxygen für vkbst aus dem Quellcode\&.
