.TH "vkst::basic_allocator< TAllocator, TFilter >" 3 "vkbst" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vkst::basic_allocator< TAllocator, TFilter > \- The basic allocator for all allocator implementations in this library\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vkstAllocatorBase\&.hpp>\fP
.SS "Öffentliche Typen"

.in +1c
.ti -1c
.RI "using \fBallocator_category\fP = typename TAllocator::allocator_category"
.br
.ti -1c
.RI "using \fBis_thread_safe\fP = typename TAllocator::is_thread_safe"
.br
.ti -1c
.RI "using \fBfilter_type\fP = TFilter"
.br
.ti -1c
.RI "using \fBvalue_type\fP = void"
.br
.ti -1c
.RI "using \fBpointer\fP = void *"
.br
.ti -1c
.RI "using \fBconst_pointer\fP = const void *"
.br
.ti -1c
.RI "using \fBdifference_type\fP = std::ptrdiff_t"
.br
.ti -1c
.RI "using \fBsize_type\fP = size_t"
.br
.in -1c
.SS "Öffentliche Methoden"

.in +1c
.ti -1c
.RI "\fBbasic_allocator\fP () noexcept"
.br
.RI "Constructs a \fC\fBbasic_allocator\fP\fP and calls the \fCfirst()\fP method of the underlying allocator\&. "
.ti -1c
.RI "\fBpointer\fP \fBallocate\fP (size_t size, size_t alignment)"
.br
.RI "Allocates a buffer using the given allocator and checks with the filter if the allocation is allowed\&. "
.ti -1c
.RI "\fBpointer\fP \fBallocate\fP (size_t size)"
.br
.RI "Allocates a buffer using the given allocator and checks with the filter if the allocation is allowed\&. "
.ti -1c
.RI "\fBpointer\fP \fBallocate\fP (size_t count, size_t size, size_t alignment=0)"
.br
.RI "Allocates an array using the given allocator and checks with the filter if the allocation is allowed\&. "
.ti -1c
.RI "void \fBdeallocate\fP (\fBpointer\fP address, size_t size) noexcept"
.br
.RI "Deallocates a buffer using the given allocator and checks with the filter if the deallocation is allowed\&. "
.ti -1c
.RI "void \fBdeallocate\fP (\fBpointer\fP address, size_t count, size_t size) noexcept"
.br
.RI "Deallocates an array using the given allocator and checks with the filter if the deallocation is allowed\&. "
.ti -1c
.RI "template<class Type , size_t alignment, typename\&.\&.\&. Args> Type * \fBconstruct\fP (Args &&\&.\&.\&. args)"
.br
.RI "Constructs an object at a given address from allocated memory\&. "
.ti -1c
.RI "template<class Type > void \fBdestroy\fP (Type *address) noexcept"
.br
.RI "Destroys an object and frees the allocated memory\&. "
.ti -1c
.RI "size_t \fBget_max_alocator_size\fP () const noexcept"
.br
.RI "Gets the maximum size that can be allocated by this allocator\&. "
.in -1c
.SH "Ausführliche Beschreibung"
.PP 

.SS "template<class TAllocator, class TFilter = basic_allocator_filter>
.br
class vkst::basic_allocator< TAllocator, TFilter >"The basic allocator for all allocator implementations in this library\&. 

This class provides a basic allocator that combines an allocator implementation (passed as \fCTAllocator\fP) with a filter (passed as \fCTFilter\fP)\&. The filter is used to perform actions before and after allocations and deallocations\&. It provides methods to allocate and deallocate memory, as well as construct and destroy objects\&.
.PP
\fBTemplate-Parameter\fP
.RS 4
\fITAllocator\fP The allocator implementation type\&. 
.br
\fITFilter\fP The filter type used for pre- and post-allocation operations\&. 
.RE
.PP

.PP
Definiert in Zeile \fB25\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SH "Dokumentation der benutzerdefinierten Datentypen"
.PP 
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> using \fBvkst::basic_allocator\fP< TAllocator, TFilter >::allocator_category =  typename TAllocator::allocator_category"
The category of the allocator (e\&.g\&., \fCstd::allocator\fP)\&. 
.PP
Definiert in Zeile \fB27\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> using \fBvkst::basic_allocator\fP< TAllocator, TFilter >::const_pointer =  const void*"
Const pointer type for the allocated memory\&. 
.PP
Definiert in Zeile \fB33\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> using \fBvkst::basic_allocator\fP< TAllocator, TFilter >::difference_type =  std::ptrdiff_t"
Difference type for pointer arithmetic\&. 
.PP
Definiert in Zeile \fB34\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> using \fBvkst::basic_allocator\fP< TAllocator, TFilter >::filter_type =  TFilter"
The type of the filter used in this allocator\&. 
.PP
Definiert in Zeile \fB29\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> using \fBvkst::basic_allocator\fP< TAllocator, TFilter >::is_thread_safe =  typename TAllocator::is_thread_safe"
Whether the allocator is thread-safe\&. 
.PP
Definiert in Zeile \fB28\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> using \fBvkst::basic_allocator\fP< TAllocator, TFilter >::pointer =  void*"
Pointer type for the allocated memory\&. 
.PP
Definiert in Zeile \fB32\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> using \fBvkst::basic_allocator\fP< TAllocator, TFilter >::size_type =  size_t"
Size type for allocation sizes\&. 
.PP
Definiert in Zeile \fB35\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> using \fBvkst::basic_allocator\fP< TAllocator, TFilter >::value_type =  void"
The type of values allocated by this allocator\&. 
.PP
Definiert in Zeile \fB31\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SH "Beschreibung der Konstruktoren und Destruktoren"
.PP 
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> \fBvkst::basic_allocator\fP< TAllocator, TFilter >::basic_allocator ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Constructs a \fC\fBbasic_allocator\fP\fP and calls the \fCfirst()\fP method of the underlying allocator\&. 
.PP
Definiert in Zeile \fB41\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SH "Dokumentation der Elementfunktionen"
.PP 
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> \fBpointer\fP \fBvkst::basic_allocator\fP< TAllocator, TFilter >::allocate (size_t count, size_t size, size_t alignment = \fC0\fP)\fC [inline]\fP"

.PP
Allocates an array using the given allocator and checks with the filter if the allocation is allowed\&. This method multiplies the count by the size of each element to compute the total allocation size, then checks with the filter before proceeding\&.
.PP
\fBParameter\fP
.RS 4
\fIcount\fP The number of elements in the array\&. 
.br
\fIsize\fP The size of each element in the array\&. 
.br
\fIalignment\fP The alignment for the allocation\&. 
.RE
.PP
\fBRückgabe\fP
.RS 4
A pointer to the newly allocated memory, or \fCnullptr\fP if the allocation fails\&. 
.RE
.PP

.PP
Definiert in Zeile \fB94\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> \fBpointer\fP \fBvkst::basic_allocator\fP< TAllocator, TFilter >::allocate (size_t size)\fC [inline]\fP"

.PP
Allocates a buffer using the given allocator and checks with the filter if the allocation is allowed\&. This is a convenience method that assumes the default alignment for the given size\&.
.PP
\fBParameter\fP
.RS 4
\fIsize\fP The size of the desired buffer\&. 
.RE
.PP
\fBRückgabe\fP
.RS 4
A pointer to the newly allocated memory, or \fCnullptr\fP if the allocation fails\&. 
.RE
.PP

.PP
Definiert in Zeile \fB77\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> \fBpointer\fP \fBvkst::basic_allocator\fP< TAllocator, TFilter >::allocate (size_t size, size_t alignment)\fC [inline]\fP"

.PP
Allocates a buffer using the given allocator and checks with the filter if the allocation is allowed\&. The allocation is performed only if the filter's pre-allocation check passes, and the post-allocation hook is called afterwards\&.
.PP
\fBParameter\fP
.RS 4
\fIsize\fP The size of the desired buffer\&. 
.br
\fIalignment\fP The alignment for the allocation\&. 
.RE
.PP
\fBRückgabe\fP
.RS 4
A pointer to the newly allocated memory, or \fCnullptr\fP if the allocation fails\&. 
.RE
.PP

.PP
Definiert in Zeile \fB55\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> template<class Type , size_t alignment, typename\&.\&.\&. Args> Type * \fBvkst::basic_allocator\fP< TAllocator, TFilter >::construct (Args &&\&.\&.\&. args)\fC [inline]\fP"

.PP
Constructs an object at a given address from allocated memory\&. The allocated memory is first obtained by calling \fCallocate\fP, then the object is constructed using placement new\&.
.PP
\fBTemplate-Parameter\fP
.RS 4
\fIType\fP The type of the object to construct\&. 
.br
\fIArgs\fP The arguments to pass to the object's constructor\&. 
.RE
.PP
\fBParameter\fP
.RS 4
\fIalignment\fP The alignment for the allocation\&. 
.br
\fIargs\fP The arguments for constructing the object\&. 
.RE
.PP
\fBRückgabe\fP
.RS 4
A pointer to the constructed object\&. 
.RE
.PP

.PP
Definiert in Zeile \fB148\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> void \fBvkst::basic_allocator\fP< TAllocator, TFilter >::deallocate (\fBpointer\fP address, size_t count, size_t size)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Deallocates an array using the given allocator and checks with the filter if the deallocation is allowed\&. This method computes the total size of the array and performs the deallocation after checking with the filter\&.
.PP
\fBParameter\fP
.RS 4
\fIaddress\fP The address of the array to free\&. 
.br
\fIcount\fP The number of elements in the array\&. 
.br
\fIsize\fP The size of each element in the array\&. 
.RE
.PP

.PP
Definiert in Zeile \fB127\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> void \fBvkst::basic_allocator\fP< TAllocator, TFilter >::deallocate (\fBpointer\fP address, size_t size)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Deallocates a buffer using the given allocator and checks with the filter if the deallocation is allowed\&. The deallocation is performed only if the filter's pre-deallocation check passes, and the post-deallocation hook is called afterwards\&.
.PP
\fBParameter\fP
.RS 4
\fIaddress\fP The address of the memory to free\&. 
.br
\fIsize\fP The size of the memory to deallocate\&. 
.RE
.PP

.PP
Definiert in Zeile \fB109\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> template<class Type > void \fBvkst::basic_allocator\fP< TAllocator, TFilter >::destroy (Type * address)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Destroys an object and frees the allocated memory\&. The object's destructor is called, and the allocated memory is freed\&.
.PP
\fBTemplate-Parameter\fP
.RS 4
\fIType\fP The type of the object to destroy\&. 
.RE
.PP
\fBParameter\fP
.RS 4
\fIaddress\fP The pointer to the object to destroy\&. 
.RE
.PP

.PP
Definiert in Zeile \fB165\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.
.SS "template<class TAllocator , class TFilter  = basic_allocator_filter> size_t \fBvkst::basic_allocator\fP< TAllocator, TFilter >::get_max_alocator_size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Gets the maximum size that can be allocated by this allocator\&. 
.PP
\fBRückgabe\fP
.RS 4
The maximum size that can be allocated by the allocator\&. 
.RE
.PP

.PP
Definiert in Zeile \fB178\fP der Datei \fBvkstAllocatorBase\&.hpp\fP\&.

.SH "Autor"
.PP 
Automatisch erzeugt von Doxygen für vkbst aus dem Quellcode\&.
