.TH "md_README" 3 "vkbst" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_README \- libvkst - Vulkan and OpenCL Data Management Library 
.PP
 libvkst is a C++ library designed to handle data management between RAM and GPU using Vulkan and OpenCL\&. It aims to provide a flexible and efficient way to move, compress, and process data on modern GPUs, similar to DirectStorage, but with more versatility in terms of data sources and applications\&.
.SH "Features"
.PP
.IP "\(bu" 2
\fBUnified Buffer Management\fP: Support for various data types including integers, characters, files, graphics, textures, etc\&.
.IP "\(bu" 2
\fBData Transfer\fP: Efficient transfer of data between RAM and GPU using Vulkan\&.
.IP "\(bu" 2
\fBCompression\fP: Integration of GPU-based compression and decompression algorithms to minimize data transfer overhead\&.
.IP "\(bu" 2
\fBCompute Capabilities\fP: Use OpenCL for specific mathematical and computational tasks on the GPU\&.
.IP "\(bu" 2
\fBIntermediate Storage\fP: Ability to offload data to GPU memory as intermediate storage using Vulkan\&.
.PP
.SH "Dokumentation"
.PP
Found: https://roseledark.github.io/vkst-doc/d0/d30/md_README.html
.SH "Installation"
.PP
.SS "Prerequisites"
.IP "\(bu" 2
clang-19
.IP "\(bu" 2
Vulkan SDK
.IP "\(bu" 2
OpenCL SDK
.IP "\(bu" 2
CMake
.PP
.SS "Build and Install"
.IP "1." 4
Clone the repository: 
.PP
.nf
git clone https://github\&.com/yourusername/libvkst\&.git
cd libvkst

.fi
.PP

.IP "2." 4
Create a build directory and navigate to it: 
.PP
.nf
mkdir build
cd build

.fi
.PP

.IP "3." 4
Configure the project with CMake\&. 
.PP
.nf
cmake \-DCMAKE_VERBOSE_MAKEFILE:BOOL="1" \-DCMAKE_BUILD_TYPE:STRING="Debug" \-\-preset linux \&.\&.

.fi
.PP

.IP "4." 4
Build and install the library: 
.PP
.nf
make
sudo make install

.fi
.PP

.PP
.SH "Usage"
.PP
.PP
.nf
#include <vkbst/libvkst\&.hpp>


int main() {
    uint32_t a_host[10]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    vkst::buffer<uint32_t, 16> a_buffer(a_host, 10 * sizeof(uint32_t)); // Create buffer on host \- alignment 16, size 10*sizeof(uint32_t) 

    vkst::opencl_buffer< vkst::buffer<uint32_t, 16> > opencl_buffer(a_buffer, CL::Context::curent, true); // Create Lock
    if(host_helper\&.assign_to_gpu(CL::CommandQueue, true )) { // Write buffer to gpu
        // BUffer is in GPU \- a_buffer is locked, don*t use!!!
    }
    // With require we get the buffer from the GPU
    // Wenn second arg true is we read from gpu to a_buffer 
    if(host_helper\&.require(CL::CommandQueue, false)) {
        // Buffer now un locked
    }
        // To device

    return 0;
}
.fi
.PP
 
.SH "License"
.PP
This project is licensed under either EUPL
.SH "Contributing"
.PP
Contributions are welcome! Please fork the repository and submit pull requests\&.
.SH "Acknowledgments"
.PP
Special thanks to the open-source community and all contributors\&. 
