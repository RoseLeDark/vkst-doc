.TH "include/vkstAlignment.hpp" 3 "vkbst" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/vkstAlignment.hpp
.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <limits\&.h>\fP
.br
\fC#include <stdalign\&.h>\fP
.br
\fC#include <type_traits>\fP
.br

.SS "Datenstrukturen"

.in +1c
.ti -1c
.RI "struct \fBvkst::internal::alignof_helper< T >\fP"
.br
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< N >\fP"
.br
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< 1 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< 2 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< 4 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< 8 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< 16 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< 32 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< 64 >\fP"
.br
.ti -1c
.RI "union \fBvkst::internal::max_align\fP"
.br
.ti -1c
.RI "struct \fBvkst::is_pod< T >\fP"
.br
.ti -1c
.RI "struct \fBvkst::is_pod< internal::aligned1 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::is_pod< internal::aligned2 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::is_pod< internal::aligned4 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::is_pod< internal::aligned8 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::is_pod< internal::aligned16 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::is_pod< internal::aligned32 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::is_pod< internal::aligned64 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::alignment_of< T >\fP"
.br
.ti -1c
.RI "struct \fBvkst::alignment_of< void >\fP"
.br
.ti -1c
.RI "struct \fBvkst::alignment_of< void const >\fP"
.br
.ti -1c
.RI "struct \fBvkst::alignment_of< void const volatile >\fP"
.br
.ti -1c
.RI "struct \fBvkst::alignment_of< void volatile >\fP"
.br
.ti -1c
.RI "struct \fBvkst::long_double_alignment< Target, check >\fP"
.br
.ti -1c
.RI "struct \fBvkst::long_double_alignment< Target, false >\fP"
.br
.ti -1c
.RI "struct \fBvkst::double_alignment< Target, check >\fP"
.br
.ti -1c
.RI "struct \fBvkst::double_alignment< Target, false >\fP"
.br
.ti -1c
.RI "struct \fBvkst::long_long_alignment< Target, check >\fP"
.br
.ti -1c
.RI "struct \fBvkst::long_long_alignment< Target, false >\fP"
.br
.ti -1c
.RI "struct \fBvkst::long_alignment< Target, check >\fP"
.br
.ti -1c
.RI "struct \fBvkst::long_alignment< Target, false >\fP"
.br
.ti -1c
.RI "struct \fBvkst::int_alignment< Target, check >\fP"
.br
.ti -1c
.RI "struct \fBvkst::int_alignment< Target, false >\fP"
.br
.ti -1c
.RI "struct \fBvkst::short_alignment< Target, check >\fP"
.br
.ti -1c
.RI "struct \fBvkst::short_alignment< Target, false >\fP"
.br
.ti -1c
.RI "struct \fBvkst::char_alignment< Target, check >\fP"
.br
.ti -1c
.RI "struct \fBvkst::char_alignment< Target, false >\fP"
.br
.ti -1c
.RI "struct \fBvkst::aligned_as< T >\fP"
.br
.in -1c
.SS "Namensbereiche"

.in +1c
.ti -1c
.RI "namespace \fBvkst\fP"
.br
.ti -1c
.RI "namespace \fBvkst::internal\fP"
.br
.in -1c
.SS "Typdefinitionen"

.in +1c
.ti -1c
.RI "\fBusing\fP \fBvkst::max_align_t\fP = \fBuintptr_t\fP"
.br
.in -1c
.SS "Funktionen"

.in +1c
.ti -1c
.RI "\fBsize_t\fP \fBvkst::nlz_base\fP (\fBuint64_t\fP x)"
.br
.ti -1c
.RI "\fBsize_t\fP \fBvkst::nlz\fP (\fBuint64_t\fP x)"
.br
.ti -1c
.RI "\fBstruct\fP \fBvkst::internal::__attribute__\fP ((\fBaligned\fP(1))) \fBaligned1\fP"
.br
.ti -1c
.RI "\fBstruct\fP \fBvkst::internal::__attribute__\fP ((\fBaligned\fP(2))) \fBaligned2\fP"
.br
.ti -1c
.RI "\fBstruct\fP \fBvkst::internal::__attribute__\fP ((\fBaligned\fP(4))) \fBaligned4\fP"
.br
.ti -1c
.RI "\fBstruct\fP \fBvkst::internal::__attribute__\fP ((\fBaligned\fP(8))) \fBaligned8\fP"
.br
.ti -1c
.RI "\fBstruct\fP \fBvkst::internal::__attribute__\fP ((\fBaligned\fP(16))) \fBaligned16\fP"
.br
.ti -1c
.RI "\fBstruct\fP \fBvkst::internal::__attribute__\fP ((\fBaligned\fP(32))) \fBaligned32\fP"
.br
.ti -1c
.RI "\fBstruct\fP \fBvkst::internal::__attribute__\fP ((\fBaligned\fP(64))) \fBaligned64\fP"
.br
.ti -1c
.RI "template<\fBclass\fP \fBintegral\fP > \fBconstexpr\fP \fBbool\fP \fBvkst::is_aligned\fP (\fBintegral\fP x, \fBsize_t\fP \fBa\fP) \fBnoexcept\fP"
.br
.ti -1c
.RI "\fBbool\fP \fBvkst::is_aligned\fP (\fBconst\fP \fBvolatile\fP \fBvoid\fP *\fBp\fP, \fBsize_t\fP \fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBintegral\fP > \fBconstexpr\fP \fBintegral\fP \fBvkst::align_up\fP (\fBintegral\fP x, \fBsize_t\fP \fBa\fP) \fBnoexcept\fP"
.br
.ti -1c
.RI "template<\fBclass\fP pointer > pointer \fBvkst::align_up_ptr\fP (pointer \fBp\fP, \fBsize_t\fP \fBa\fP)"
.br
.ti -1c
.RI "template<\fBclass\fP \fBintegral\fP > \fBconstexpr\fP \fBintegral\fP \fBvkst::align_down\fP (\fBintegral\fP x, \fBsize_t\fP \fBa\fP) \fBnoexcept\fP"
.br
.ti -1c
.RI "template<\fBclass\fP pointer > pointer \fBvkst::align_down_ptr\fP (pointer \fBp\fP, \fBsize_t\fP \fBa\fP)"
.br
.ti -1c
.RI "\fBconstexpr\fP \fBbool\fP \fBvkst::is_aligvalid\fP (\fBsize_t\fP \fBalignment\fP) \fBnoexcept\fP"
.br
.RI "is a valid alignment, i\&.e\&. a power of two not zero "
.ti -1c
.RI "\fBsize_t\fP \fBvkst::alig_offset\fP (\fBvoid\fP *\fBaddress\fP, \fBsize_t\fP \fBalignment\fP) \fBnoexcept\fP"
.br
.ti -1c
.RI "\fBsize_t\fP \fBvkst::alignment_for\fP (\fBconst\fP \fBsize_t\fP \fBsize\fP) \fBnoexcept\fP"
.br
.in -1c
.SS "Variablen"

.in +1c
.ti -1c
.RI "\fBconstexpr\fP \fBsize_t\fP \fBvkst::max_alignment\fP = \fBalignof\fP(\fBmax_align_t\fP)"
.br
.in -1c
.SH "Autor"
.PP 
Automatisch erzeugt von Doxygen f√ºr vkbst aus dem Quellcode\&.
