.TH "include/vkstAlignment.hpp" 3 "vkbst" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/vkstAlignment.hpp
.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <limits\&.h>\fP
.br
\fC#include <stdalign\&.h>\fP
.br
\fC#include <type_traits>\fP
.br

.SS "Datenstrukturen"

.in +1c
.ti -1c
.RI "struct \fBvkst::internal::alignof_helper< T >\fP"
.br
.RI "A helper structure for computing alignment of a given type\&. "
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< N >\fP"
.br
.RI "A template to enforce alignment for specific sizes\&. "
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< 1 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< 2 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< 4 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< 8 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< 16 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< 32 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::internal::type_with_alignment< 64 >\fP"
.br
.ti -1c
.RI "union \fBvkst::internal::max_align\fP"
.br
.RI "A union type to determine the maximum alignment\&. "
.ti -1c
.RI "struct \fBvkst::is_pod< T >\fP"
.br
.RI "A type trait to check if a type is a Plain Old Data (POD) type\&. "
.ti -1c
.RI "struct \fBvkst::is_pod< internal::aligned1 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::is_pod< internal::aligned2 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::is_pod< internal::aligned4 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::is_pod< internal::aligned8 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::is_pod< internal::aligned16 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::is_pod< internal::aligned32 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::is_pod< internal::aligned64 >\fP"
.br
.ti -1c
.RI "struct \fBvkst::alignment_of< T >\fP"
.br
.RI "A template to get the alignment of a type\&. "
.ti -1c
.RI "struct \fBvkst::alignment_of< void >\fP"
.br
.ti -1c
.RI "struct \fBvkst::alignment_of< void const >\fP"
.br
.ti -1c
.RI "struct \fBvkst::alignment_of< void const volatile >\fP"
.br
.ti -1c
.RI "struct \fBvkst::alignment_of< void volatile >\fP"
.br
.ti -1c
.RI "struct \fBvkst::long_double_alignment< Target, check >\fP"
.br
.RI "Adjusts the alignment of a type based on the target alignment\&. "
.ti -1c
.RI "struct \fBvkst::long_double_alignment< Target, false >\fP"
.br
.ti -1c
.RI "struct \fBvkst::double_alignment< Target, check >\fP"
.br
.ti -1c
.RI "struct \fBvkst::double_alignment< Target, false >\fP"
.br
.ti -1c
.RI "struct \fBvkst::long_long_alignment< Target, check >\fP"
.br
.ti -1c
.RI "struct \fBvkst::long_long_alignment< Target, false >\fP"
.br
.ti -1c
.RI "struct \fBvkst::long_alignment< Target, check >\fP"
.br
.ti -1c
.RI "struct \fBvkst::long_alignment< Target, false >\fP"
.br
.ti -1c
.RI "struct \fBvkst::int_alignment< Target, check >\fP"
.br
.ti -1c
.RI "struct \fBvkst::int_alignment< Target, false >\fP"
.br
.ti -1c
.RI "struct \fBvkst::short_alignment< Target, check >\fP"
.br
.ti -1c
.RI "struct \fBvkst::short_alignment< Target, false >\fP"
.br
.ti -1c
.RI "struct \fBvkst::char_alignment< Target, check >\fP"
.br
.ti -1c
.RI "struct \fBvkst::char_alignment< Target, false >\fP"
.br
.ti -1c
.RI "struct \fBvkst::aligned_as< T >\fP"
.br
.RI "A helper type alias to align a type to its appropriate alignment\&. "
.in -1c
.SS "Namensbereiche"

.in +1c
.ti -1c
.RI "namespace \fBvkst\fP"
.br
.ti -1c
.RI "namespace \fBvkst::internal\fP"
.br
.in -1c
.SS "Typdefinitionen"

.in +1c
.ti -1c
.RI "using \fBvkst::max_align_t\fP = uintptr_t"
.br
.RI "Defines the maximum alignment type and value\&. "
.in -1c
.SS "Funktionen"

.in +1c
.ti -1c
.RI "size_t \fBvkst::nlz_base\fP (uint64_t x)"
.br
.RI "Calculates the number of leading zero bits in a 64-bit value\&. "
.ti -1c
.RI "size_t \fBvkst::nlz\fP (uint64_t x)"
.br
.RI "Calculates the number of leading zero bits minus one\&. "
.ti -1c
.RI "struct \fBvkst::internal::__attribute__\fP ((aligned(1))) aligned1"
.br
.ti -1c
.RI "struct \fBvkst::internal::__attribute__\fP ((aligned(2))) aligned2"
.br
.ti -1c
.RI "struct \fBvkst::internal::__attribute__\fP ((aligned(4))) aligned4"
.br
.ti -1c
.RI "struct \fBvkst::internal::__attribute__\fP ((aligned(8))) aligned8"
.br
.ti -1c
.RI "struct \fBvkst::internal::__attribute__\fP ((aligned(16))) aligned16"
.br
.ti -1c
.RI "struct \fBvkst::internal::__attribute__\fP ((aligned(32))) aligned32"
.br
.ti -1c
.RI "struct \fBvkst::internal::__attribute__\fP ((aligned(64))) aligned64"
.br
.ti -1c
.RI "template<class integral > constexpr bool \fBvkst::is_aligned\fP (integral x, size_t a) noexcept"
.br
.RI "Checks if an integer or pointer is aligned to a given boundary\&. "
.ti -1c
.RI "bool \fBvkst::is_aligned\fP (const volatile void *p, size_t a)"
.br
.ti -1c
.RI "template<class integral > constexpr integral \fBvkst::align_up\fP (integral x, size_t a) noexcept"
.br
.RI "Aligns a given integral value upwards to the nearest boundary\&. "
.ti -1c
.RI "template<class pointer > pointer \fBvkst::align_up_ptr\fP (pointer p, size_t a)"
.br
.RI "Aligns a given pointer upwards to the nearest boundary\&. "
.ti -1c
.RI "template<class integral > constexpr integral \fBvkst::align_down\fP (integral x, size_t a) noexcept"
.br
.RI "Aligns a given integral value downwards to the nearest boundary\&. "
.ti -1c
.RI "template<class pointer > pointer \fBvkst::align_down_ptr\fP (pointer p, size_t a)"
.br
.ti -1c
.RI "constexpr bool \fBvkst::is_aligvalid\fP (size_t alignment) noexcept"
.br
.RI "Checks if a given alignment is valid\&. "
.ti -1c
.RI "size_t \fBvkst::alig_offset\fP (void *address, size_t alignment) noexcept"
.br
.RI "Computes the offset needed to align a given address\&. "
.ti -1c
.RI "size_t \fBvkst::alignment_for\fP (const size_t size) noexcept"
.br
.RI "Computes the alignment required for a given size\&. "
.in -1c
.SS "Variablen"

.in +1c
.ti -1c
.RI "constexpr size_t \fBvkst::max_alignment\fP = alignof(\fBmax_align_t\fP)"
.br
.in -1c
.SH "Autor"
.PP 
Automatisch erzeugt von Doxygen f√ºr vkbst aus dem Quellcode\&.
